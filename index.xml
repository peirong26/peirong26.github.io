<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>moco</title>
    <link>https://kywk.github.io/moco/</link>
    <description>Recent content on moco</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 16 Mar 2021 16:58:20 +0800</lastBuildDate><atom:link href="https://kywk.github.io/moco/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Ubuntu Server 利用 Nginx 伺服器執行 PHP 程式</title>
      <link>https://kywk.github.io/moco/posts/2021/03/ubuntu_nginx-php/</link>
      <pubDate>Tue, 16 Mar 2021 16:58:20 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2021/03/ubuntu_nginx-php/</guid>
      <description>Nginx + PHP on ubuntu 長期以來 Apache Server 的效能與承載數低落, 加上層出不窮的漏洞, 許多人陸續投向 Event-based Server 的懷抱, 例如 Nginx.
Nginx 是一個免費開源且穩定高效的 Web 伺服器程式, 擁有反向代理及負載平衡的功能, 藉由 Non-blocking 與 epool 的特性, 大幅提昇了連線服務量與速度, 成為近年來最為廣泛運用的選擇.
但是 Nginx 只是單純的 HTTP Server, 如果要執行程式, 還得藉助 CGI 的幫忙. Nginx 可以透過 FastCGI 去執行 PHP 程式, 且內建 FastCGI 快取功能. 而第一步需要實現的是如何讓 Nginx 正確的呼叫 PHP.
CGI CGI (Common Gateway Interface) 是用於網頁伺服器的介面標準, 支援 CGI 的網頁伺服器會將其所接收到的 HTTP 請求的內容設成環境變數, 作為某支程式時的環境變數以及標準輸入 (stdin) 輸入的資料. 而該程式標準輸出 (stdout) 的資料則會被網頁伺服器拿來回應給客戶端.
網頁伺服器每次使用 CGI 執行程式時, 都需要建立出新的行程 (fork process), 就像在終端機直接用檔案路徑去執行某支程式.</description>
    </item>
    
    <item>
      <title>Setup shadowsocks on macOS</title>
      <link>https://kywk.github.io/moco/posts/2021/03/macos_shadowsocks/</link>
      <pubDate>Mon, 15 Mar 2021 15:33:18 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2021/03/macos_shadowsocks/</guid>
      <description>因大陸案子關係, 接觸了些大陸網路環境, 也因此接觸到 shadowsocks.
Shadowsocks（簡稱SS） 是一種基於Socks5代理方式的加密傳輸協定, 也可以指實現這個協定的各種開發包. 在中國大陸, SS 廣泛用於突破防火長城（GFW）, 以瀏覽被封鎖, 遮蔽或干擾的內容.
Shadowsocks 需找個 VPS 跑 server, 再透過本地端 client 連線. server 端的設定這篇不談, 僅紀錄 macOS 上安裝與設定 client 的過程.
安裝 shadowsocks-libev Shadowsocks 有不少 client 可用, 我選用 shadowsocks-libev. 他可以當系統服務, 也可以透過不少 plugin 來擴充功能, 相當強大方便.
透過套件管理工具 homebrew 即可安裝 shadowsocks-libev.
$ brew update $ brew install shadowsocks-libev ... To have launchd start shadowsocks-libev now and restart at login: brew services start shadowsocks-libev Or, if you don&amp;#39;t want/need a background service you can just run: /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.</description>
    </item>
    
    <item>
      <title>Chrome Extension List, 2021.Mar</title>
      <link>https://kywk.github.io/moco/posts/2021/03/chrome_extension-2021-mar/</link>
      <pubDate>Tue, 09 Mar 2021 14:37:59 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2021/03/chrome_extension-2021-mar/</guid>
      <description>翻出紀錄, 上次整理 Chrome extension 已約三四年前了, 一開始紀錄 Chrome extension 是重灌電腦前整理列表, 方便重灌後使用. 但後來 Chrome 把 extension, bookmark&amp;hellip; 等個人同步在雲端上, 只需要登入個人帳號, 就可以還原之前的 extension, bookmark&amp;hellip; 等, 也就不再整理列表了.
再次整理列表, 因為有些喜歡的 extension 已在 Chrome Store 下架, 無法還原. 尋找如何安裝該擴充時, 發現網路上有人把常用的擴充下載備份, 被下架時可以利用開發者模式安裝本地端擴充. 覺得是個不錯的方法.
最近已經越來越感受到雲端除了方便外, 也帶來許多的不定因素. 別人分享的檔案, 上傳的影片, 發布的軟體, 都隨時可能被下架. 而本地之備份在法律上有模糊之地, 僅個人低調使用.
這邊整理個人喜歡的擴充, 以及介紹連結. 也為了若 Chrome 在省電與記憶體管理上繼續積弱不振的話, 可能移師 Edge 作準備.
Browser enhance Dream Afar New Tab (遠方) 「每天打開新分頁都是一段不期而遇的旅行」
新分頁美化, 目前最愛的一個新分頁功能.
曾用過一陣子強調 Tab 與 WorkSpace 管理的新分頁, 後來因工作流程取捨與簡化, 過於強調分頁管理反而會擾亂流程. 故回頭使用這個以美觀優先的新分頁.
目前這個擴充已在 Chrome Store 下架, 需自行尋找 crx 安裝.</description>
    </item>
    
    <item>
      <title>Sublime Text 3 Package List, 2021.Feb</title>
      <link>https://kywk.github.io/moco/posts/2021/03/subl_packages-2021-feb/</link>
      <pubDate>Mon, 01 Mar 2021 14:37:45 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2021/03/subl_packages-2021-feb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>macOS 開發環境建構 2021 Feb</title>
      <link>https://kywk.github.io/moco/posts/2021/02/macos_dev-env-2021-feb/</link>
      <pubDate>Fri, 26 Feb 2021 14:53:37 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2021/02/macos_dev-env-2021-feb/</guid>
      <description>過去重灌電腦最麻煩的就是還原設定檔, 雖然 Mac 有 TimeMachine 可無痛轉移, 但個人癖好還是喜歡重新檢視與安裝設定. 但越來越多軟體可以把配置設定存在雲端, 不但保持多台電腦間的同步, 重灌也只需登入帳號就可還原配置, 個人以為比 TimeMachine 方便.
但仍有些開發或 CLI 工具, 是將配置檔存放於家目錄下的隱藏檔 (.files), 無法透過雲端同步. 我是把這些檔案搬移到 Dropbox 資料夾下, 再建立 Symbolic Link, 如此就可透過 Dropbox 來同步設定檔.
現在重灌電腦要安裝設定環境, 僅需透過 shell script 安裝軟體與建立 Symbolic Link, 相當無痛.
CLI Environment iTerm2 $ brew install iterm2 zsh and oh-my-zsh macOS Mojave (10.14.x) 開始內建 zsh, 而 Catalina (10.15.x) 以後預設 Shell 改為 zsh.
在 macOS Mojave 系統要把預設 shell 改為 zsh 以及配置 zsh 最方便也推薦的方式就是透過 Oh My Zsh</description>
    </item>
    
    <item>
      <title>macOS 系統安裝紀錄 2021.Feb</title>
      <link>https://kywk.github.io/moco/posts/2021/02/macos_setup-note-2021-feb/</link>
      <pubDate>Fri, 26 Feb 2021 14:05:03 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2021/02/macos_setup-note-2021-feb/</guid>
      <description>因故拿了 MacBook Pro 2015 重灌 macOS Mojave, 記錄一下軟體安裝歷程. 隨著網頁工具越來越成熟, 電腦上必備的工具倒是越來越少.
前置軟體 Homebrew Homebrew
homebrew cask 的支援越來越多, 越來越方便, 個人多數軟體都透過 homebrew 安裝. 在開始安裝各類軟體前, Homebrew 是必要的.
$ /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; Dropbox 我的專案和軟體配置檔案 (.files) 都放在 Dropbox 上, .files 裡也存了為了新環境設定的簡單 setup.sh. 故新電腦的第二件事就是安裝 Dropbox Desktop, 把工作專案和環境配置同步到新電腦.
Google Chrome 雖已漸漸棄用 Chrome, 改用 Safari 和 Edge. 但在 Chrome 長期使用習慣, 仍無法馬上改變. 導致先安裝 Chrome 也是安裝系統的必備之一.
Sublime Text 其實開發程式的主力已經轉為 VSCode, GoLand, WebStorm&amp;hellip; 等. 但 Sublime Text 啟動速度快, 基本作業順暢, 仍是我必然安裝的工具.</description>
    </item>
    
    <item>
      <title>Google Team Drive 無限空間申請</title>
      <link>https://kywk.github.io/moco/posts/2021/02/gd_team-drive-signup/</link>
      <pubDate>Fri, 19 Feb 2021 11:35:05 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2021/02/gd_team-drive-signup/</guid>
      <description>!!!!! 重要更新 !!!!! Google 已經公告 2021/07/01 起不再提供教育版無限空間.
以下免費團隊硬碟多為教育版空間, 勢必會陸續被收回. 本篇文章不再更新.
個人在 Team Drive 上的資料該如何逃難, 方案還在比較. 等資料移轉順利後再另發文了.
Google Drive 團隊硬碟 Google 針對商業和教育用戶推出了 Team Drive (團隊硬碟), 上傳到團隊硬碟中的檔案, 所有權屬於該團隊硬碟管理員和團隊管理員, 可解決員工離職後員工所存放的檔案失效的問題. 團隊硬碟也可以分享給團隊外的成員, 和外部廠商合作時可以讓廠商上傳檔案. 由於檔案所有權屬於管理員, 也可避免廠商擅自移除檔案.
Google Drive 團隊硬碟在線自助領取 目前團隊硬碟的容量為無限容量, 也未限制每個用戶能開設的團隊硬碟數量, 故有些企業或教育用戶管理員開放大眾使用該組織的團隊硬碟.
這樣的使用並不完全符合 Google 規範, 且管理員也有權隨時取消團隊硬碟. 使用前還是要先評估.
近來 Google 對於無限容量服務策略有不少調整, 無限空間可能隨時會被 Google 取消收回, 使用相關服務請三思. 可以拿來存放網路資源, 加密異地備份, 但避免存放個人重要資料.
系列文還在編寫的同時, 之前申請的某個團隊營碟就硬生生消失了. 別把重要資料放團隊碟, 多申請幾組, 設定備份才是使用團隊硬碟較為保險的方式.
下列申請網址隨時可能失效, 有些達到 API 單日上限, 隔日再試即可.
 绿野蓬莱岛 多合一: https://penglai.ga/ 英國老牌名校謝菲爾德大學團隊盤: https://gdrive.zppcw.cn  failed at 2021-01-14</description>
    </item>
    
    <item>
      <title>利用 youtube-dl 下載 Youtube 影片</title>
      <link>https://kywk.github.io/moco/posts/2021/02/yt_youtube-dl/</link>
      <pubDate>Sun, 07 Feb 2021 11:46:48 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2021/02/yt_youtube-dl/</guid>
      <description>一直都是利用播放清單和 Like 來當作 Youtube 影片的書籤. 不過陸續發現有些影片會無預期被刪除或改為私人影片, 也有些頻道會莫名消失.
單純音樂類的播放清單就算了, 但有些專業參考性質的影片需要時找不到, 故發起把影片下載保存的念頭,
網路上有不少下載 Youtube 影片的線上網站和 App, 試用過後最後回到最適合工程師的 youtube-dl
youtube-dl youtube-dl 是個 OpenSource 專案, 有興趣研究的可在 GitHub 上 Fork 專案.
日前曾因可能違反 DMCA 而導致 GitHub 上所有 youtube-dl 專案都被下架. (是的, 不單 youtube 影片可能下架, 連下載工具都可能被下架) 所幸後來在眾多熱心法律專業人士協助下, 確認並不違反 DMCA 而恢復專案. 完整故事可到官方 blog 查看.
install Mac 上透過 brew 安裝 youtube-dl 相當簡單.
$ brew install youtube-dl ffmpeg youtube-dl 是 python script, 利用 python 適合寫爬蟲的特性, 解析 youtube 影片位置並下載. 目前 youtube 網站中高畫質格式多為 video-only 或 audio-only 的 webm 格式, 傳統 mp4 格式大多只到 720p.</description>
    </item>
    
    <item>
      <title>Tar 加密打包語法</title>
      <link>https://kywk.github.io/moco/posts/2020/12/cli_encrypt-tarball/</link>
      <pubDate>Thu, 10 Dec 2020 17:31:07 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2020/12/cli_encrypt-tarball/</guid>
      <description>網路上免費創建團隊硬碟理論上創建者是團隊硬碟管理員, 但實際上所有的團隊硬碟仍受 Google GSuite / Workspace 機構管理員管轄. 機構管理員雖然無法直接存取檔案, 但有權將檔案擁有者轉移給他人. 如果只是存放網路上載來的資源就算了, 若是存放個人檔案, 仍建議加密壓縮.
TarBall Tar 支援 gzip, bz2, xz&amp;hellip; 等多種壓縮方式, 但 tar 並不支援加密. 在命令列模式下要加密 tarball, 需透過其他指令來完成, 最常用的是 openssl.
加密 簡單指令如下: (僅加密打包不壓縮)
$ tar cvf - FILE_NAME | openssl des3 -salt -k passw0rd -out /path/to/file.tar 這個指令主要分成兩部分
第一部分是 tar cvf - FILE_NAME, 意思是針對 FILE_NAME 進行打包, 其中三個參數的意思是:
 c: create 創建一個新的 tarball 文件 v: verbose 輸出詳細的處理過程 f:file 需要打包的檔案 (Unix 下一切都是檔案, 資料夾也屬於檔案)  第二部分是 openssl des3 -salt -k passw0rd -out /path/to/file.</description>
    </item>
    
    <item>
      <title>Setup Rclone for Google Team Drive on macOS</title>
      <link>https://kywk.github.io/moco/posts/2020/12/gd_rclone-config/</link>
      <pubDate>Mon, 07 Dec 2020 17:35:35 +0800</pubDate>
      
      <guid>https://kywk.github.io/moco/posts/2020/12/gd_rclone-config/</guid>
      <description>針對 Google Drive 個人與商業用戶, Google 分別提供了 Backup and Sync 以及 DriveFS 兩個桌面軟體以便操作, 但無論是 Backup and Sync 還是 DriveFS 都不支援 Team Drive, 無法在桌面環境下操作 Team Drive, 只能透過網頁端處理.
所幸萬能的 Rclone 有支援 Team Drive. Rclone Rclone 是一個非常好用的雲端硬碟管理工具, 在命令模式下直接針對多數雲端硬碟服務進行操作, 搭配其他系統工具, 可自動化雲端硬碟的管理, 包括異地備份, 打包, 移除老舊檔案&amp;hellip; 等等.
目前 Rclone 支援的雲端硬碟服務多達 38 種, 其中本篇的重點在第 13 項 &amp;ldquo;Google Drive&amp;rdquo;.
注意: 第 12 項的 Google Cloud Storage 並不是 Google Drive, 而是 GCP 中類似 AWS S3 的服務.
Install rclone on macOS 在 macOS 透過 homebrew 安裝的 rclone 目前不支援 mount 命令.</description>
    </item>
    
  </channel>
</rss>
