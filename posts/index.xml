<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on moco</title>
        <link>https://kywk.github.io/moco/posts/</link>
        <description>Recent content in Posts on moco</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 16 Mar 2021 16:58:20 +0800</lastBuildDate>
        <atom:link href="https://kywk.github.io/moco/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>在 Ubuntu Server 利用 Nginx 伺服器執行 PHP 程式</title>
            <link>https://kywk.github.io/moco/posts/2021/03/ubuntu_nginx-php/</link>
            <pubDate>Tue, 16 Mar 2021 16:58:20 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2021/03/ubuntu_nginx-php/</guid>
            <description>Nginx + PHP on ubuntu 長期以來 Apache Server 的效能與承載數低落, 加上層出不窮的漏洞, 許多人陸續投向 Event-based Server 的懷抱, 例如 Nginx.
Nginx 是一個免費開源且穩定高效的 Web 伺服器程式, 擁有反向代理及負載平衡的功能, 藉由 Non-blocking 與 epool 的特性, 大幅提昇了連線服務量與速度, 成為近年來最為廣泛運用的選擇.
但是 Nginx 只是單純的 HTTP Server, 如果要執行程式, 還得藉助 CGI 的幫忙. Nginx 可以透過 FastCGI 去執行 PHP 程式, 且內建 FastCGI 快取功能. 而第一步需要實現的是如何讓 Nginx 正確的呼叫 PHP.
CGI CGI (Common Gateway Interface) 是用於網頁伺服器的介面標準, 支援 CGI 的網頁伺服器會將其所接收到的 HTTP 請求的內容設成環境變數, 作為某支程式時的環境變數以及標準輸入 (stdin) 輸入的資料. 而該程式標準輸出 (stdout) 的資料則會被網頁伺服器拿來回應給客戶端.
網頁伺服器每次使用 CGI 執行程式時, 都需要建立出新的行程 (fork process), 就像在終端機直接用檔案路徑去執行某支程式.</description>
            <content type="html"><![CDATA[<h2 id="nginx--php-on-ubuntu">Nginx + PHP on ubuntu</h2>
<p>長期以來 Apache Server 的效能與承載數低落, 加上層出不窮的漏洞,
許多人陸續投向 Event-based Server 的懷抱, 例如 Nginx.</p>
<p>Nginx 是一個免費開源且穩定高效的 Web 伺服器程式, 擁有反向代理及負載平衡的功能,
藉由 Non-blocking 與 epool 的特性, 大幅提昇了連線服務量與速度, 成為近年來最為廣泛運用的選擇.</p>
<p>但是 Nginx 只是單純的 HTTP Server, 如果要執行程式, 還得藉助 CGI 的幫忙.
Nginx 可以透過 FastCGI 去執行 PHP 程式, 且內建 FastCGI 快取功能.
而第一步需要實現的是如何讓 Nginx 正確的呼叫 PHP.</p>
<h3 id="cgi">CGI</h3>
<p>CGI (Common Gateway Interface) 是用於網頁伺服器的介面標準,
支援 CGI 的網頁伺服器會將其所接收到的 HTTP 請求的內容設成環境變數,
作為某支程式時的環境變數以及標準輸入 (stdin) 輸入的資料.
而該程式標準輸出 (stdout) 的資料則會被網頁伺服器拿來回應給客戶端.</p>
<p>網頁伺服器每次使用 CGI 執行程式時, 都需要建立出新的行程 (fork process),
就像在終端機直接用檔案路徑去執行某支程式.
可想而知, 這樣的方式在應付多個 HTTP 請求時是沒有效率的。</p>
<h3 id="fastcgi">FastCGI</h3>
<p>FastCGI 則是在網頁伺服器和 CGI程式之間再加一個管理員.</p>
<p>網頁伺服器要把 HTTP 請求交給管理員處理, 管理員負責分配 CGI 程式的執行資源,
使系統不會每次遇到請求就開一個行程去跑 CGI 程式, 以改善運作效率.</p>
<h3 id="fpmfastcgi-process-manager">FPM(FastCGI Process Manager)</h3>
<p>FPM(php-fpm) 是 PHP 目前的 FastCGI 實作.</p>
<h2 id="installation">Installation</h2>
<h3 id="nginx">Nginx</h3>
<p>在 Ubuntu 上安裝 Nginx 和安裝其他軟體一樣, 直接透過 <code>apt</code> 安裝即可.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo apt install nginx
</code></pre></div><p>Nginx 預設會啟用 HTTP, 佔用 TCP 連接埠為 HTTP 預設的 80.
可以使用以下指令來查看 Nginx 是否有確實安裝成功.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo netstat -tlnp | grep nginx
</code></pre></div><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3dV-nWgkfyACFUd4j0DDN0tmvWuOrhO8zprZsVWg7MbXfwzDYPOzYQtdvB0cqqPozf_-yzMW55AfkWGDc0sbFfm19rltX5FBkYcCP-qZ4T2JCl5auRbEaftoxXWyAKw5p4oIaCCGdpZGFuLr-vAcpO0Gg=w1214-h130-no?authuser=0" alt="">
如上圖, 如果有看到連接埠 80 有被監聽, 就表示 Nginx 安裝成功.</p>
<p>Nginx 所以監聽任意網路介面上的 80 連接埠, 是因為預設的設定檔 <code>(/etc/nginx/sites-available/default)</code> 中,
有設一個會去監聽任意網路介面, 且連接埠為 80 的 <strong>虛擬主機 (Virtual Host)</strong>.
有關於 Nginx 進一步的設定與配置說明, 可以參考
<a href="https://magiclen.org/ubuntu-server-nginx/">使用Ubuntu Server架設Nginx伺服器 | MagicLen</a></p>
<h3 id="php">PHP</h3>
<p>PHP 是腳本式程式語言, 需要有 PHP 執行環境才可以被執行.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo apt install php-cli
</code></pre></div><p>安裝完 <code>php-cli</code> 套件後, 可以使用 <code>php</code> 指令來執行 PHP 程式.</p>
<ul>
<li>
<p>查看 PHP 的版本:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ php -v
</code></pre></div><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3eYw_TsLcSEZ9pglabIbB0nJqs0KKJNq9y9qjjhZgWAAxpQ2LdxFH0eGKnc1Tjsr9h_0lDQhgYKvfGp0XSovF8ZsNVLA5IOJHWxZvjL1M_5YZWlbORRURJDRo7LkpWc-r9QB18sx9aYqDVEoF0Qms0jnQ=w802-h172-no?authuser=0" alt=""></p>
</li>
<li>
<p>執行 PHP 程式:
<img src="https://lh3.googleusercontent.com/pw/ACtC-3eOPeyqs8L6qvl7AxoPmInMY2pLWaoHAys9miug_nA6ACVhHqGbeHiBduAsPlWu_Rtb7iL-q4fM_2v25jmURV33rzqQvaxCRDHhshKE3RLSNlDAV8ESb4iy59NV7sbosIDFrpnSU7u3rHyNBK_Mktb50w=w784-h326-no?authuser=0" alt=""></p>
</li>
</ul>
<p><code>php</code> 設定檔的路徑是 <code>/etc/php/&lt;PHP版本號碼&gt;/cli/php.ini</code>,
詳細設定說明可參考官方文件或 <a href="https://magiclen.org/ubuntu-server-nginx-php/">使用Ubuntu Server透過Nginx伺服器執行PHP程式 | MagicLen</a>.</p>
<h3 id="php-fpm">PHP-FPM</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo apt install php-fpm
</code></pre></div><p>FPM 預設只會監聽 Unix Domain Socket(UDS，或稱 IPC Socket), UDS 檔案路徑為 <code>/run/php/php&lt;PHP版本號碼&gt;-fpm.sock</code>.
例如 PHP 7.4 UDS 檔案路徑就是 <code>/run/php/php7.4-fpm.sock</code>.</p>
<p>如果要確認 FPM 有沒有安裝並啟用成功, 可以利用 <code>socat</code> 這個指令工具來進行.
安裝 socat：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo apt install socat
</code></pre></div><p>執行以下指令來判斷 FPM 是否正常工作:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ echo /dev/null | sudo socat unix:/var/run/php/php-fpm.sock - <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Working!&#34;</span> <span style="color:#f92672">||</span> echo <span style="color:#e6db74">&#34;Not working!&#34;</span>
</code></pre></div><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3fQR-dRGQoBBDsbMbaJLBMuWu4qRTgsg6AVJaQ8nxsL1268iPR1UTrC3-4EhX8IQee8-v0rWO_ZAhvMja7kwfLB0UcnMwu24oRcChfdJ2FkzNWfe7vxR2p9EIZtf5c5WqaeD7X-PzxQGewrE7qp8A7bXw=w928-h128-no?authuser=0" alt=""></p>
<h2 id="configuration">Configuration</h2>
<h3 id="nginx-1">Nginx</h3>
<p>順利安裝完之後開始修改 Nginx Server 設定檔, 如下:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo vim /etc/nginx/nginx.conf
</code></pre></div><pre><code>user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    use epoll;
    worker_connections 2048;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
</code></pre><p>幾個重要的參數:</p>
<ul>
<li><strong>user</strong>: Nginx Server 啟動所使用的使用者 (ubuntu 預設用 www-data)</li>
<li><strong>pid</strong>: ProcessID 存放位置 ( ubuntu 預設在 /run/nginx.pid)</li>
<li><strong>worker_processes</strong>: 開啟的程序數量, 請對應 CPU 核心數進行調整, 或維持預設的 auto</li>
<li><strong>use epoll</strong>: 啟動 epoll 會快很多，效果不錯</li>
<li><strong>worker_connections</strong>: 每個程序最高可以開啟的連線數</li>
<li><strong>server_tokens off</strong>: 移除 Nginx 版本資訊</li>
<li><strong>access_log, error_log</strong>: HTTP Log 存放的位置</li>
</ul>
<p>上面是 Ngnix Server 整體的設定, 接下來要進行 Virtual Host 配置.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo vim /etc/nginx/sites-available/default
</code></pre></div><pre><code>server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.php index.nginx-debian.html;

    server_name _;

    # set expiration of assets to MAX for caching
    location ~* \.(ico|css|js|gif|jpe?g|png|ogg|ogv|svg|svgz|eot|otf|woff)(\?.+)?$ {
        expires max;
        log_not_found off;
    }

    # framework rewrite
    location / {
        try_files $uri $uri/ /index.php =404;
    }

    # pass PHP scripts to FastCGI server
    location ~* \.php$ {
        #include snippets/fastcgi-php.conf;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_split_path_info ^(.+\.php)(.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
}
</code></pre><p>幾個參數設定說明:</p>
<ul>
<li><strong>server_name</strong>: 同 Apache ServerName 可以用來指定 Virtual Host (虛擬主機)</li>
<li><strong>root</strong>: 網頁所擺放的位置</li>
<li><strong>location /</strong> Selection (framework rewrite):
用 <code>try_files $uri $uri/ /index.php;</code> 來嘗試讀取開啟.
如果檔案不存在就轉為呼叫 index.php.
做的事情與常用的 Apache Rewrite Module 差不多.
主要是為了將 Request 導給 Framework (如 Codeigniter, Zend Framework 等等),
若沒有使用 PHP Framwwork, 可以無須設定.</li>
<li><strong>location ~ .php$</strong> Selection (pass PHP scripts to FastCGI server):
設定要將 <code>.php</code> 檔案直接交由 FPM 來處理.
詳細的設定說明可以參考 <a href="https://www.nginx.com/resources/wiki/">Nginx WIKI</a>.
<ul>
<li><strong>fastcgi_pass</strong> 指向 PHP-FPM 開啟的服務位置, 需和後面的 PHP-FPM 設定相同,</li>
</ul>
</li>
</ul>
<h3 id="設定-fpm">設定 FPM</h3>
<p>FPM 設定檔放置於 <code>/etc/php/&lt;PHP版本號碼&gt;/fpm/</code> 目錄下,
例如 PHP 7.4 就是在 <code>/etc/php/7.4/fpm/</code> 目錄.</p>
<p>FPM 設定檔目錄中有個 <code>pool.d</code> 目錄, 用來放置每個「池」 (Pool) 的設定檔.
一個池就是一個 FastCGI 的管理區域(或者說管理員).
預設為 <code>www</code> 池, 設定檔檔名為 <code>www.conf</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo vim /etc/php/7.4/fpm/pool.d/www.conf
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ini" data-lang="ini"><span style="color:#66d9ef">[www]</span>
<span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">www-data</span>
<span style="color:#a6e22e">group</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">www-data</span>
 
<span style="color:#a6e22e">listen</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">127.0.0.1:9000</span>
<span style="color:#a6e22e">listen.backlog</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">65535</span>
<span style="color:#a6e22e">listen.owner</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">www-data</span>
<span style="color:#a6e22e">listen.group</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">www-data</span>
 
<span style="color:#a6e22e">request_terminate_timeout</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">600s</span>
 
<span style="color:#a6e22e">pm</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">dynamic</span>
<span style="color:#a6e22e">pm.max_children</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">5</span>
<span style="color:#a6e22e">pm.start_servers</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">2</span>
<span style="color:#a6e22e">pm.min_spare_servers</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">1</span>
<span style="color:#a6e22e">pm.max_spare_servers</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">3</span>
</code></pre></div><ul>
<li><strong>listen</strong>: 設定從哪個地方接收 Nginx fastcgi_pass 請求, 要和前面 Nginx 的設定相同.
預設是 <code>/run/php/php&lt;PHP版本號碼&gt;-fpm.sock</code>.
PHP-FPM 可以透過 TCP Socket 或者是 UNIX Kernel Socket.
Kernel Socket 速度會比較快, 但是經過壓力測試後 Kernel Socket 反而常常掉包,
穩定性不如 TCP Socket 來的優異. 故這邊設為本地端的 TCP Socket.</li>
<li><strong>request_terminate_timeout</strong>: 設定表示 PHP 的執行時間, 超過這個週期就會結束.
設太短容易遇到檔案上傳時間比較久就 GG 了.</li>
<li><strong>pm</strong>: 設定子行程的數量要固定還是浮動.
<ul>
<li>static 是固定為最大數量(pm.max_children).</li>
<li>dynamic 是動態調整, 預設是 dynamic.</li>
<li>ondemand 是行程開完就關.</li>
</ul>
</li>
<li><strong>pm.max_children</strong>: 設定子行程的最大數量, 預設是5.
這個數量建議設為處理器的數量再根據每個子行程的記憶體用量乘上某個倍數 (例如記憶體剩得少就乘2，記憶體剩得多就乘4).</li>
</ul>
<h3 id="start-nginx--php">Start Nginx + PHP</h3>
<p>最後啟動 Nginx 與 PHP-FPM 服務:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo service php7.4-fpm restart
$ sudo service nginx restart
</code></pre></div><p>開啟瀏覽器試看看, Ubuntu 裝起來的 Nginx Welcome 畫面如下：</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3euV0DG5x_6NEszyLYrW1cW8cFj6p7qapfHbldw0am_PCAEX3lYENsxrPIBCA4gCCt37f-GBJv5Gs6138SYf8sf4l_wmKGbv1HbnmUH-q8uUWMHCnZ7cylYvCLxiXSwrzIgQ3K2EgX8Ido8J0jd0ZTbLw=w1088-h508-no?authuser=0" alt=""></p>
<h2 id="see-also">See Also</h2>
<p>整體來說 Nginx 安裝蠻容易的, 但要調校的好又是另外一件事.
設定的不洽當, 在高流量時 Nginx 常會送你 502 Bad Gateway.</p>
<p>又例如 Nginx 可以將 FastCGI 服務回應的資料快取成檔案,
這樣下次如果又有一樣的請求，Nginx 就直接從檔案系統中撈出來回應，
不必再轉送給 FastCGI 服務處理, 可加快反應.
Cache 的設置相當考驗 SRE 對 PHP 服務了解程度, 並非所有服務都適合開設 Cache.
這另篇再討論了.</p>
<p>需要花蠻多時間嘗試調整參數, 搭配效能測試工具來檢查, 讓伺服器發揮最大效用.</p>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="https://magiclen.org/ubuntu-server-nginx-php/">使用Ubuntu Server透過Nginx伺服器執行PHP程式 | MagicLen</a></li>
<li><a href="https://blog.toright.com/posts/3890/%E7%84%A1%E5%A0%85%E4%B8%8D%E6%91%A7%EF%BC%8C%E5%94%AF%E5%BF%AB%E4%B8%8D%E7%A0%B4%EF%BC%81%E5%BF%AB%E6%94%B9%E7%94%A8-nginx-php-fpm-%E5%8F%96%E4%BB%A3-apache-%E5%90%A7%EF%BC%81.html">無堅不摧，唯快不破！快改用 Nginx + PHP-FPM 取代 Apache 吧！ - Soul &amp; Shell Blog</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Setup shadowsocks on macOS</title>
            <link>https://kywk.github.io/moco/posts/2021/03/macos_shadowsocks/</link>
            <pubDate>Mon, 15 Mar 2021 15:33:18 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2021/03/macos_shadowsocks/</guid>
            <description>因大陸案子關係, 接觸了些大陸網路環境, 也因此接觸到 shadowsocks.
Shadowsocks（簡稱SS） 是一種基於Socks5代理方式的加密傳輸協定, 也可以指實現這個協定的各種開發包. 在中國大陸, SS 廣泛用於突破防火長城（GFW）, 以瀏覽被封鎖, 遮蔽或干擾的內容.
Shadowsocks 需找個 VPS 跑 server, 再透過本地端 client 連線. server 端的設定這篇不談, 僅紀錄 macOS 上安裝與設定 client 的過程.
安裝 shadowsocks-libev Shadowsocks 有不少 client 可用, 我選用 shadowsocks-libev. 他可以當系統服務, 也可以透過不少 plugin 來擴充功能, 相當強大方便.
透過套件管理工具 homebrew 即可安裝 shadowsocks-libev.
$ brew update $ brew install shadowsocks-libev ... To have launchd start shadowsocks-libev now and restart at login: brew services start shadowsocks-libev Or, if you don&amp;#39;t want/need a background service you can just run: /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.</description>
            <content type="html"><![CDATA[<p>因大陸案子關係, 接觸了些大陸網路環境, 也因此接觸到 shadowsocks.<br>
<a href="https://zh.wikipedia.org/wiki/Shadowsocks">Shadowsocks（簡稱SS）</a>
是一種基於Socks5代理方式的加密傳輸協定, 也可以指實現這個協定的各種開發包.
在中國大陸, SS 廣泛用於突破防火長城（GFW）, 以瀏覽被封鎖, 遮蔽或干擾的內容.</p>
<p>Shadowsocks 需找個 VPS 跑 server, 再透過本地端 client 連線.
server 端的設定這篇不談, 僅紀錄 macOS 上安裝與設定 client 的過程.</p>
<h2 id="安裝-shadowsocks-libev">安裝 shadowsocks-libev</h2>
<p>Shadowsocks 有不少 client 可用, 我選用 shadowsocks-libev.
他可以當系統服務, 也可以透過不少 plugin 來擴充功能, 相當強大方便.</p>
<p>透過套件管理工具 homebrew 即可安裝 shadowsocks-libev.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew update
$ brew install shadowsocks-libev
...
To have launchd start shadowsocks-libev now and restart at login:
  brew services start shadowsocks-libev
Or, <span style="color:#66d9ef">if</span> you don<span style="color:#960050;background-color:#1e0010">&#39;</span>t want/need a background service you can just run:
  /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.json
</code></pre></div><p>出現後面這些訊息表示安裝成功, 先透過 CLI 確認 SS 連線可以正確 work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ss-local -s &lt;SERVER_IP&gt; -p &lt;SERVER_PORT&gt; -k &lt;PASSWORD&gt; -b 0.0.0.0 -l 1080-m aes-256-gcm


 2021-03-15 17:28:36 INFO: initializing ciphers... aes-256-gcm
 2021-03-15 17:28:36 INFO: listening at 0.0.0.0:1080
</code></pre></div><p>出現 <code>listening at 0.0.0.0:1080</code> 表示 SS 連線成功,
可參考後面段落設置 Socks Proxy, 連線上網確認是否正確.</p>
<h2 id="設定-shadowsocks-libev">設定 shadowsocks-libev</h2>
<p>shadowsocks-libev 可以服務方式運行,
配置文件在 <code>/usr/local/etc/shadowsocks-libev.json</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;server&#34;</span>:<span style="color:#e6db74">&#34;abc.xyz.com&#34;</span>,
    <span style="color:#f92672">&#34;server_port&#34;</span>:<span style="color:#ae81ff">8888</span>,
    <span style="color:#f92672">&#34;local_port&#34;</span>:<span style="color:#ae81ff">1080</span>,
    <span style="color:#f92672">&#34;password&#34;</span>:<span style="color:#e6db74">&#34;AbCdEfGhIjKlMn&#34;</span>,
    <span style="color:#f92672">&#34;timeout&#34;</span>:<span style="color:#ae81ff">5</span>,
    <span style="color:#f92672">&#34;method&#34;</span>:<span style="color:#e6db74">&#34;chacha20-ietf-poly1305&#34;</span>,
    <span style="color:#f92672">&#34;mode&#34;</span>:<span style="color:#e6db74">&#34;tcp_and_udp&#34;</span>,
} 
</code></pre></div><p>修改後可透過 brew services 啟動服務.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew services start shadowsocks-libev 
<span style="color:#f92672">==</span>&gt; Successfully started <span style="color:#e6db74">`</span>shadowsocks-libev<span style="color:#e6db74">`</span> <span style="color:#f92672">(</span>label: homebrew.mxcl.shadowsocks-libev<span style="color:#f92672">)</span>
</code></pre></div><h2 id="全區代理設定">全區代理設定</h2>
<p>macOS 可透過全區代理的方式, 讓所有連線都使用 SS 當跳板. 設定方式在:
<code>系統偏好設定 &gt; 網路 &gt; Wi-Fi &gt; 進階 &gt; 代理</code></p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3du9pQkxgcpbedOxgve86--0UEyEQFCL63vTq-lq2xKJTunRbwdnK9KYniQK3fCcgXeYznijbOQjGTEowRbOwhgbYrILrh1NIsfm_6vskx_413Bt8-s8dVsoJP1LETT0NuInrjXbT_AiYnTEbe2IDEkuQ=w1336-h1154-no?authuser=0" alt=""></p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3fnJwLdyl7XqvApKymmHyElVZckPBgMyCaTeSEdmX-mCrTRh3XzRP8z0g9DUcbb0dOkMSTVIXNBqfJZcfwgwaNygIE0vAFjcIkj-Rq8tdVAKGmtodCz-Wc9vnjWPB0zEcaLcDm3UFMe4gpfpMKGEWTFig=w1336-h1154-no?authuser=0" alt=""></p>
<p>在 SOCKS 欄位填上本地端對應的資訊即可.</p>
<h2 id="快速開關代理">快速開關代理</h2>
<p>一般來說不會設定為全區代理, 會透過 PAC 來設定白名單等自動代理.
但我個人需求比較簡單, 需要處理公務時開啟代理連線管理後台, 處理完畢即可關閉代理.</p>
<p>因此設定了簡單的 alias, 透過 CLI 來快速開關代理.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">alias proxyon<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;brew services restart shadowsocks-libev; networksetup -setsocksfirewallproxy wi-fi localhost 1080&#39;</span>
alias proxyoff<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;brew services stop shadowsocks-libev; networksetup -setsocksfirewallproxystate wi-fi off&#39;</span>
</code></pre></div><p>之後需要連線後台時, 在 Ternimal 打 <code>poxyon</code> 即可透過代理連線.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$  proxyon

<span style="color:#f92672">==</span>&gt; Successfully started <span style="color:#e6db74">`</span>shadowsocks-libev<span style="color:#e6db74">`</span> <span style="color:#f92672">(</span>label: homebrew.mxcl.shadowsocks-libev<span style="color:#f92672">)</span>
</code></pre></div><p>處理完畢後, 打 <code>proxyoff</code> 關閉代理, 回到原生網魯環境.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ proxyoff

Stopping <span style="color:#e6db74">`</span>shadowsocks-libev<span style="color:#e6db74">`</span>... <span style="color:#f92672">(</span>might take a <span style="color:#66d9ef">while</span><span style="color:#f92672">)</span>
<span style="color:#f92672">==</span>&gt; Successfully stopped <span style="color:#e6db74">`</span>shadowsocks-libev<span style="color:#e6db74">`</span> <span style="color:#f92672">(</span>label: homebrew.mxcl.shadowsocks-libev<span style="color:#f92672">)</span>
</code></pre></div><h2 id="see-also">See Also</h2>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="https://medium.com/@yanlong/macos%E4%BD%BF%E7%94%A8shadowsocks-libev-simple-obfs%E6%95%99%E7%A8%8B-c10eba9c0758">MacOS使用shadowsocks-libev+Simple-OBFS教程 - YAN LONG - Medium</a></li>
<li><a href="https://marvinsblog.net/post/2017-01-15-use-shadowsocks-on-macos/">ShadowSocks助力macOS科学上网 | Marvin&rsquo;s Blog【程式人生】</a></li>
<li><a href="https://wild-flame.github.io/guides/docs/mac-os-x-setup-guide/shadowsocks">Shadowsocks · Mac OS X 配置指南</a></li>
<li><a href="https://placeless.net/blog/shadowsocks-libev-&amp;-acl-on-macos">shadowsocks-libev &amp; acl on macOS</a></li>
<li><a href="https://www.wumingx.com/tools/shadowsocks_obfs.html">&lsquo;shadowsocks-libev+simple-obfs流量混淆的两种方案&rsquo; | 无名老卒BLOG</a></li>
<li><a href="https://shadowsockshelp.github.io/Shadowsocks/mac.html">苹果 macOS 使用 Shadowsocks 设置教程 | Shadowsocks</a></li>
<li><a href="https://apple.stackexchange.com/questions/226544/how-to-set-proxy-on-os-x-terminal-permanently">macos - How to set proxy on OS X Terminal permanently? - Ask Different</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Chrome Extension List, 2021.Mar</title>
            <link>https://kywk.github.io/moco/posts/2021/03/chrome_extension-2021-mar/</link>
            <pubDate>Tue, 09 Mar 2021 14:37:59 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2021/03/chrome_extension-2021-mar/</guid>
            <description>翻出紀錄, 上次整理 Chrome extension 已約三四年前了, 一開始紀錄 Chrome extension 是重灌電腦前整理列表, 方便重灌後使用. 但後來 Chrome 把 extension, bookmark&amp;hellip; 等個人同步在雲端上, 只需要登入個人帳號, 就可以還原之前的 extension, bookmark&amp;hellip; 等, 也就不再整理列表了.
再次整理列表, 因為有些喜歡的 extension 已在 Chrome Store 下架, 無法還原. 尋找如何安裝該擴充時, 發現網路上有人把常用的擴充下載備份, 被下架時可以利用開發者模式安裝本地端擴充. 覺得是個不錯的方法.
最近已經越來越感受到雲端除了方便外, 也帶來許多的不定因素. 別人分享的檔案, 上傳的影片, 發布的軟體, 都隨時可能被下架. 而本地之備份在法律上有模糊之地, 僅個人低調使用.
這邊整理個人喜歡的擴充, 以及介紹連結. 也為了若 Chrome 在省電與記憶體管理上繼續積弱不振的話, 可能移師 Edge 作準備.
Browser enhance Dream Afar New Tab (遠方) 「每天打開新分頁都是一段不期而遇的旅行」
新分頁美化, 目前最愛的一個新分頁功能.
曾用過一陣子強調 Tab 與 WorkSpace 管理的新分頁, 後來因工作流程取捨與簡化, 過於強調分頁管理反而會擾亂流程. 故回頭使用這個以美觀優先的新分頁.
目前這個擴充已在 Chrome Store 下架, 需自行尋找 crx 安裝.</description>
            <content type="html"><![CDATA[<p>翻出紀錄, 上次整理 Chrome extension 已約三四年前了,
一開始紀錄 Chrome extension 是重灌電腦前整理列表, 方便重灌後使用.
但後來 Chrome 把 extension, bookmark&hellip; 等個人同步在雲端上,
只需要登入個人帳號, 就可以還原之前的 extension, bookmark&hellip; 等, 也就不再整理列表了.</p>
<p>再次整理列表, 因為有些喜歡的 extension 已在 Chrome Store 下架, 無法還原.
尋找如何安裝該擴充時, 發現網路上有人把常用的擴充下載備份, 被下架時可以利用開發者模式安裝本地端擴充. 覺得是個不錯的方法.</p>
<p>最近已經越來越感受到雲端除了方便外, 也帶來許多的不定因素.
別人分享的檔案, 上傳的影片, 發布的軟體, 都隨時可能被下架.
而本地之備份在法律上有模糊之地, 僅個人低調使用.</p>
<p>這邊整理個人喜歡的擴充, 以及介紹連結.
也為了若 Chrome 在省電與記憶體管理上繼續積弱不振的話, 可能移師 Edge 作準備.</p>
<!-- raw HTML omitted -->
<h2 id="browser-enhance">Browser enhance</h2>
<h3 id="dream-afar-new-tab-遠方">Dream Afar New Tab (遠方)</h3>
<p><strong>「每天打開新分頁都是一段不期而遇的旅行」</strong></p>
<p>新分頁美化, 目前最愛的一個新分頁功能.<br>
曾用過一陣子強調 Tab 與 WorkSpace 管理的新分頁, 後來因工作流程取捨與簡化, 過於強調分頁管理反而會擾亂流程.
故回頭使用這個以美觀優先的新分頁.</p>
<p><em>目前這個擴充已在 Chrome Store 下架, 需自行尋找 crx 安裝.</em></p>
<ul>
<li><a href="https://free.com.tw/dream-afar/">Dream Afar 遠方：每次打開新分頁都是一段不期而遇的旅行（Chrome 擴充功能）</a></li>
<li><a href="https://www.playpcesor.com/2014/06/google-chrome-Dream-After-New-Tab.html">一生必去的旅遊景點放入 Google Chrome 新分頁召喚夢想</a></li>
</ul>
<h3 id="dark-reader">Dark Reader</h3>
<p><strong>關愛眼睛，使用 <a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?hl=zh-TW">Dark Reader</a> 進行夜間和日間瀏覽</strong></p>
<p>Dark Reader 能將所有網站或你設定的某些網站轉為暗色背景.
不僅如此, Dark Reader 還允許使用者自己調整各項顏色數值, 例如亮度, 對比, 灰階, 墨色及字型等等. 找出讓自己舒服閱讀的色調, 提升網站易讀性.</p>
<p>個人最愛的功能是他可以針對不同網站, 選擇是否啟用深色功能.
對於一些已提供深色模式的網站, 相容度更高.</p>
<ul>
<li><a href="https://github.com/darkreader/darkreader">GitHub - darkreader/darkreader: Dark Reader Chrome and Firefox extension</a></li>
<li><a href="https://free.com.tw/dark-reader/">Dark Reader 讓網站使用深色夜間瀏覽模式，解決白色背景造成的眼睛疲勞</a></li>
<li><a href="https://www.playpcesor.com/2016/07/dark-reader.html">Dark Reader 所有網頁轉成深黑夜讀模式，效果極佳</a></li>
</ul>
<h3 id="google-dictionary-by-google">Google Dictionary (by Google)</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/google-dictionary-by-goog/mgijmajocgfcbeboacabfgobmjgjcoja">Google Dictionary</a> 網頁即時英翻中, 滑鼠選取單字自動翻譯</strong></p>
<p>Google Dictionary 瀏覽器外掛可以直接讓使用者在 Google Chrome 快速進行英文單字翻譯, 查詢.
遇到不懂的單字時, 只要以滑鼠選取, 會立即跳出翻譯搜尋結果, 還能直接發音, 在閱讀時可以更得心應手.</p>
<ul>
<li><a href="https://free.com.tw/google-dictionary-chrome-extension/">Google Dictionary 網頁即時英翻中，滑鼠選取單字自動翻譯（Chrome 擴充功能）</a></li>
<li><a href="https://www.tech-girlz.com/2020/09/chrome-google-dictionary.html">想快速查詢或翻譯網頁上的單字？用 Chrome 套件 Google Dictionary - 塔科女子</a></li>
</ul>
<h3 id="mercury-reader">Mercury Reader</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/mercury-reader/oknpjjbmpnndlpmnhmekjpocelpnlfdi">Mercury Reader</a> 更乾淨閱讀空間, 讓文章更好讀</strong></p>
<p>Safari 和部分瀏覽器有閱讀模式, 會移除廣告, 調整字形間距等, 提供文章更適合的閱讀體驗.
但 Chrome 沒有內建閱讀模式, 比較一些類似擴充後, 目前選用 Mercury Reader.
這款簡單的閱讀器, 能在需要時開啟「閱讀模式」來瀏覽內容, 將所有不相干的部份通通移除隱藏, 更容易聚焦於閱讀, 特別是長篇內容.</p>
<ul>
<li><a href="https://free.com.tw/mercury-reader/">Mercury Reader 給你更乾淨閱讀空間！替代 Readability 外掛讓文章更好讀</a></li>
</ul>
<h3 id="print-friendly--pdf">Print Friendly &amp; PDF</h3>
<p><strong><a href="https://www.printfriendly.com/">Print Friendly &amp; PDF</a> 移除側邊欄或廣告讓網頁適合列印</strong></p>
<p>Print Friendly &amp; PDF 是個免費線上服務, 自動清除網頁廣告和不必要的元素只保留文字和圖片內容, 將網頁轉換成乾淨的閱讀模式.
使用者還能手動刪除不想保留的資料, 在列印網頁時可減少紙張和墨水用量, 或是轉存乾淨簡潔的 PDF 文件.</p>
<ul>
<li><a href="https://free.com.tw/printfriendly/">PrintFriendly 讓網頁適合列印或轉 PDF，移除側邊欄或廣告更省紙張墨水</a></li>
<li><a href="https://www.xiaoyao.tw/2020/09/printfriendly.html">要列印網頁或轉存 PDF 可先使用 Print Friendly &amp; PDF 清除廣告和刪除不必要的內容 - 逍遙の窩</a></li>
</ul>
<h3 id="save-to-pocket">Save to Pocket</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?hl=zh-TW">Save to Pocket</a> 把沒時間讀的網頁先存起來, 有空再看</strong></p>
<ul>
<li><a href="https://kkplay3c.net/save-to-pocket/">(Chrome 擴充) 來不及看的網頁「稍後再看」，Save to Pocket 幫你全紀錄|KK3C狂想曲</a></li>
<li><a href="https://free.com.tw/pocket-read-it-later/">Pocket：把沒時間讀的網頁先存起來，有空再看</a></li>
</ul>
<h3 id="simpleundoclose">SimpleUndoClose</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj">SimpleUndoClose</a> 輕鬆地還原已關閉的分頁</strong></p>
<p>SimpleUndoClose 輕鬆找回過去 Chrome 已關閉的分頁, 最多可紀錄 99999</p>
<ul>
<li><a href="https://www.kocpc.com.tw/archives/287768">SimpleUndoClose 輕鬆找回過去 Chrome 已關閉的分頁，最多可紀錄 99999 - 電腦王阿達</a></li>
</ul>
<h3 id="unblock-youku">Unblock Youku</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/unblock-youku/pdnfnkhpgegpcingjbfihlkjeighnddk">Unblock Youku</a> Access Youku while outside mainland China.</strong></p>
<h3 id="url-shortener">Url Shortener</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/url-shortener/oodfdmglhbbkkcngodjjagblikmoegpa">Url Shortener</a></strong></p>
<h2 id="develop-tools">Develop Tools</h2>
<h3 id="json-formatter">JSON Formatter</h3>
<p><strong><a href="https://github.com/callumlocke/json-formatter">JSON Formatter</a> 格式化輸出顯示 JSON</strong></p>
<p>針 JSON 格式進行格式化, 並以樹狀結構進行呈現.
透過樹狀結構, 更容易了解整個 JSON 資料的關聯性.</p>
<ul>
<li><a href="https://www.minwt.com/webdesign-dev/html/19189.html">Chrome外掛－JSON Formatter讓JSON格式以樹狀呈現，不再像天書一樣密密碼碼的 | 梅問題．教學網</a></li>
<li><a href="https://www.ewdna.com/2013/01/chrome-plugin-json-formatter.html">Chrome Plugin：JSON Formatter 格式化輸出顯示json @ 符碼記憶</a></li>
</ul>
<h2 id="trello">Trello</h2>
<h3 id="add-to-trello">Add to Trello</h3>
<p><strong>看網頁資料時, <a href="https://chrome.google.com/webstore/detail/add-to-trello/engmocckoohpopiacajolojeobefbcec">Add to Trello</a> 可以快速將資料放入Trello卡片中</strong></p>
<p>喜歡用 Trello 當作 inbox 或 reference collect box 的話, 是個相當方便的工具.</p>
<h3 id="pro-for-trello-free-trello-tweaks">Pro for Trello, FREE Trello tweaks</h3>
<p>__<a href="https://chrome.google.com/webstore/detail/pro-for-trello-free-trell/hcjkfaengbcfeckhjgjdldmhjpoglecc">Pro for Trello, FREE Trello tweaks</a> __</p>
<ul>
<li><a href="https://daimom3020.blogspot.com/2020/06/trello-chrome-plugin.html">[網站心得]Trello chrome Plugin ~ 度估記事本</a></li>
</ul>
<h2 id="github">GitHub</h2>
<h3 id="gistbox-clipper">GistBox Clipper</h3>
<p><a href="https://chrome.google.com/webstore/detail/gistbox-clipper/cejmhmbmafamjegaebkjhnckhepgmido">GistBox Clipper</a> 快速讓 Gist 變成網頁資料保存夾, 還可以建立個人的 code snippet 資料庫.</p>
<ul>
<li><a href="https://longzeping.github.io/2018/08/05/GistBox%E8%AE%A9%E4%BD%A0%E7%9A%84Github-gist%E6%9B%B4%E5%A5%BD%E7%94%A8/">Github gist最佳伴侣之一：GistBox Clipper - 龙泽平的博客 | LZP Blog</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10206277">原來 Github Gist 還可以&hellip; （下） - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a></li>
</ul>
<h3 id="octolinker">OctoLinker</h3>
<p><strong><a href="https://octolinker.now.sh/">OctoLinker</a> 快速在 GitHub 不同專案間跳轉瀏覽</strong></p>
<p>OctoLinker 能將特定語言的加載語句轉為連結, 如: include, require, import&hellip; 等.
透過 OctoLinker 可以快速在 GitHub 不同專案間跳轉瀏覽.</p>
<ul>
<li><a href="https://www.oschina.net/p/octolinker">OctoLinker首页、文档和下载 - 高效阅读 GitHub 代码插件 - OSCHINA - 中文开源技术交流社区</a></li>
<li><a href="https://iter01.com/1617.html">搜尋和線上閱讀 Github 程式碼的外掛推薦 | IT人</a></li>
</ul>
<h3 id="octotree---github-code-tree">Octotree - GitHub code tree</h3>
<p><strong><a href="https://www.octotree.io/">Octotree - GitHub code tree</a> 在 GitHub 左側呈現專案樹狀圖, 以便瀏覽</strong></p>
<ul>
<li><a href="https://xenby.com/b/232-%E6%8E%A8%E8%96%A6-%E6%A8%B9%E7%8B%80%E7%B5%90%E6%A7%8B%E9%A1%AF%E7%A4%BAgithub%E5%B0%88%E6%A1%88%E7%B5%90%E6%A7%8B%E7%80%8F%E8%A6%BD%E5%99%A8%E5%B7%A5%E5%85%B7-octotree">[推薦] 樹狀結構顯示Github專案結構瀏覽器工具-Octotree | 辛比誌</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1584725">推荐几个我常用的Chrome插件 —— 让你使用Github效率翻倍 - 云+社区 - 腾讯云</a></li>
</ul>
<h3 id="refined-github">Refined GitHub</h3>
<p><strong><a href="https://github.com/sindresorhus/refined-github">Refined GitHub</a> 簡化 GitHub 的介面</strong></p>
<p>Refined Github 插件簡化了 GitHub 的介面, 添加了一些有用的功能, 比如將 issue 或者 PR 設置成未讀, 快速複製文件內容, 查看 markdown 文件的原始代碼等.</p>
<ul>
<li><a href="https://kknews.cc/zh-tw/code/bmmz9bo.html">9 大實用瀏覽器插件 網絡開發者必備 - 每日頭條</a></li>
</ul>
<h3 id="sourcegraph">Sourcegraph</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/sourcegraph/dgjhfomjieaadpoljlnidmbgkdffpack">Sourcegraph</a></strong></p>
<ul>
<li><a href="https://www.mdeditor.tw/pl/29dx/zh-hk">瀏覽 GitHub 太卡了？教你兩招！江南一點雨 - MdEditor</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27620085">使用 Sourcegraph 更好地搜索和浏览 GitHub上的代码 - 知乎</a></li>
</ul>
<h2 id="chrome-apps">Chrome Apps</h2>
<h3 id="json-editor">JSON Editor</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/json-editor/lhkmoheomjbkfloacpgllgjcamhihfaj">JSON Editor</a></strong></p>
<h3 id="polarr-photo-editor">Polarr Photo Editor</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/polarr-photo-editor/djonnbgfieijldcieafgjcnhmpcfpmgg">Polarr Photo Editor</a></strong></p>
<h3 id="secure-shell-app">Secure Shell App</h3>
<p><strong><a href="https://chrome.google.com/webstore/detail/secure-shell-app/pnhechapfaindjhompbnflcldabbghjo">Secure Shell App</a></strong></p>
<h3 id="uml-diagram-editor">UML Diagram Editor</h3>
<p>__<a href="https://chrome.google.com/webstore/detail/uml-diagram-editor/hoepdgfgogmeofkgkpapbdpdjkplcode">UML Diagram Editor</a> __</p>
<h2 id="see-also">See Also</h2>
<h3 id="遺珠">遺珠</h3>
<p>以下是曾為個人熱愛, 但因故棄用的擴充. 暫列於此&hellip;</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/drag-and-go/jaikcnhlohebodlpkmjepipngegjbfpg">Drag and Go</a><br>
拖拉鏈結在新分頁開啟, 拖拉文字搜尋引擎找資料</li>
<li><a href="https://www.fika.io/">Fika - Reader Mode</a><br>
Kindle 閱讀效果，設定更符合習慣的瀏覽模式
<ul>
<li><a href="https://free.com.tw/fika-reader-mode/">Fika 為瀏覽器加入 Kindle 閱讀效果，設定更符合習慣的瀏覽模式</a></li>
</ul>
</li>
<li><a href="https://chrome.google.com/webstore/detail/caret/fljalecfjciodhpcledpamjachpmelml">Caret</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Sublime Text 3 Package List, 2021.Feb</title>
            <link>https://kywk.github.io/moco/posts/2021/03/subl_packages-2021-feb/</link>
            <pubDate>Mon, 01 Mar 2021 14:37:45 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2021/03/subl_packages-2021-feb/</guid>
            <description></description>
            <content type="html"><![CDATA[]]></content>
        </item>
        
        <item>
            <title>macOS 開發環境建構 2021 Feb</title>
            <link>https://kywk.github.io/moco/posts/2021/02/macos_dev-env-2021-feb/</link>
            <pubDate>Fri, 26 Feb 2021 14:53:37 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2021/02/macos_dev-env-2021-feb/</guid>
            <description>過去重灌電腦最麻煩的就是還原設定檔, 雖然 Mac 有 TimeMachine 可無痛轉移, 但個人癖好還是喜歡重新檢視與安裝設定. 但越來越多軟體可以把配置設定存在雲端, 不但保持多台電腦間的同步, 重灌也只需登入帳號就可還原配置, 個人以為比 TimeMachine 方便.
但仍有些開發或 CLI 工具, 是將配置檔存放於家目錄下的隱藏檔 (.files), 無法透過雲端同步. 我是把這些檔案搬移到 Dropbox 資料夾下, 再建立 Symbolic Link, 如此就可透過 Dropbox 來同步設定檔.
現在重灌電腦要安裝設定環境, 僅需透過 shell script 安裝軟體與建立 Symbolic Link, 相當無痛.
CLI Environment iTerm2 $ brew install iterm2 zsh and oh-my-zsh macOS Mojave (10.14.x) 開始內建 zsh, 而 Catalina (10.15.x) 以後預設 Shell 改為 zsh.
在 macOS Mojave 系統要把預設 shell 改為 zsh 以及配置 zsh 最方便也推薦的方式就是透過 Oh My Zsh</description>
            <content type="html"><![CDATA[<p>過去重灌電腦最麻煩的就是還原設定檔, 雖然 Mac 有 TimeMachine 可無痛轉移, 但個人癖好還是喜歡重新檢視與安裝設定.
但越來越多軟體可以把配置設定存在雲端, 不但保持多台電腦間的同步, 重灌也只需登入帳號就可還原配置, 個人以為比 TimeMachine 方便.</p>
<p>但仍有些開發或 CLI 工具, 是將配置檔存放於家目錄下的隱藏檔 (.files),
無法透過雲端同步.
我是把這些檔案搬移到 Dropbox 資料夾下, 再建立 Symbolic Link,
如此就可透過 Dropbox 來同步設定檔.</p>
<p>現在重灌電腦要安裝設定環境, 僅需透過 shell script 安裝軟體與建立 Symbolic Link, 相當無痛.</p>
<!-- raw HTML omitted -->
<h2 id="cli-environment">CLI Environment</h2>
<h3 id="iterm2">iTerm2</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install iterm2
</code></pre></div><h3 id="zsh-and-oh-my-zsh">zsh and oh-my-zsh</h3>
<p>macOS Mojave (10.14.x) 開始內建 zsh, 而 Catalina (10.15.x) 以後預設 Shell 改為 zsh.</p>
<p>在 macOS Mojave 系統要把預設 shell 改為 zsh 以及配置 zsh 最方便也推薦的方式就是透過 <a href="https://ohmyz.sh">Oh My Zsh</a></p>
<p><strong>Oh My Zsh</strong></p>
<p>macOS Mojave 以後已經內建 Zsh, 所以直接安裝 Oh My Zsh 即可.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sh -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install zsh-completion 
</code></pre></div><h3 id="powerline-font">Powerline Font</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew tap homebrew/cask-fonts
$ brew install font-fira-code font-fira-mono font-fira-sans
$ brew install font-source-code-pro
$ brew install font-hack-nerd-font
</code></pre></div><h2 id="base-environment">Base Environment</h2>
<h3 id="docker">Docker</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install --cask docker
</code></pre></div><h3 id="brew-formulae">Brew formulae</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install git tig tmux ncdu htop lesspipe tldr diff-so-fancy fd ripgrep thefuck ag
</code></pre></div><h2 id="program-language">Program Language</h2>
<h3 id="nodejs">Node.js</h3>
<p><strong><a href="https://nodejs.org/">Node.js</a></strong></p>
<p><a href="http://goo.gl/26nHDf">Installing Node.js or io.js with nvm</a></p>
<p><strong>NVM Manual install</strong></p>
<pre><code>git clone https://github.com/creationix/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`  
cat &quot;. ~/.nvm/nvm.sh&quot; &gt;&gt; .bashrc
</code></pre><p><strong>Install node.js</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ nvm install v8.11.1
$ nvm alias default tls
$ nvm use default
</code></pre></div><h3 id="go">Go</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install go
</code></pre></div><h2 id="ide--gui-tools">IDE &amp; GUI Tools</h2>
<h3 id="vscode">VSCode</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install --cask visual-studio-code
</code></pre></div><h3 id="goland">GoLand</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install --cask goland
</code></pre></div><h3 id="webstorm">WebStorm</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install --cask webstorm
</code></pre></div><h3 id="others">Others</h3>
<p><strong><a href="https://git-fork.com/">Fork</a></strong></p>
<p>Fork - a fast and friendly git client for Mac</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install fork
</code></pre></div><p><strong>Postman</strong></p>
<p>The Collaboration Platform for API Development.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install postman
</code></pre></div><p><strong><a href="http://www.sequelpro.com/">Sequel Pro</a></strong></p>
<p>Sequel Pro is a fast, easy-to-use Mac database management application for working with MySQL databases.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install sequel-pro
</code></pre></div><p><strong><a href="https://tableplus.com">TablePlus</a></strong></p>
<p>Modern, Native Tool for Database Management.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install tableplus
</code></pre></div><p><strong><a href="https://rdm.dev">Redis Desktop Manager</a></strong></p>
<p>Redis GUI management tool for Windows, Mac OS X, Ubuntu and Debian.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install tableplus
</code></pre></div><p><strong><a href="https://robomongo.org">Robo3T</a></strong></p>
<p>Robo 3T. Free, open-source MongoDB GUI</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install tableplus
</code></pre></div><h2 id="see-also">See Also</h2>
<h3 id="遺珠">遺珠</h3>
<p>以下是曾為個人熱愛, 但因故越來越少用的軟體. 暫列於此&hellip;</p>
<ul>
<li><a href="https://atom.io/">Atom</a><br>
A hackable text editor for the 21st Century by github.</li>
<li><a href="http://sourcetreeapp.com/">SourceTree</a><br>
Free Mercurial and Git Client for Windows and Mac</li>
<li><a href="https://www.gitkraken.com/">GitKraken</a><br>
The downright luxurious Git client, for Windows, Mac &amp; Linux</li>
<li><a href="https://hyperterm.org/">HyperTerm</a>
JS/HTML/CSS Terminal</li>
</ul>
<h3 id="reference">Reference</h3>
<p><strong>Zsh</strong></p>
<ul>
<li><a href="https://sspai.com/post/55176">让你的 Mac 提前用上 macOS Catalina 的 Shell——Oh My Zsh 配置指南 - 少数派</a></li>
<li><a href="https://cyeninesky3.medium.com/bin-to-zsh-%E8%A8%AD%E5%AE%9A%E6%B5%81%E7%A8%8B-d29fe60a4121">bash to zsh 設定流程. 參考這篇一步一步執行，因為我已裝過 homebrew以及 iterm2… | by Youngmi huang | Medium</a></li>
</ul>
<p><strong>iTerm2 + Oh My Zsh</strong></p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10192874">[Tool] Mac + iTerm 2 + Oh My Zsh + Powerlevel9k 設定 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a></li>
<li><a href="https://medium.com/statementdog-engineering/prettify-your-zsh-command-line-prompt-3ca2acc967f">超簡單！十分鐘打造漂亮又好用的 zsh command line 環境 | by Gary Chu | 財報狗技術部落格 | Medium</a></li>
<li><a href="https://medium.com/@hazelwu/%E7%94%A8oh-my-zsh%E6%8A%8Aiterm%E8%AE%8A%E7%BE%8E%E7%BE%8E-8a18daa8eac">用Oh My Zsh把iTerm變美美. 使用終端機操作時常密密麻麻的，看一兩個小時還好，但如果長期這樣下去真的會眼殘，畫… | by Hazel Wu | Medium</a></li>
<li><a href="https://medium.com/@h86991868/%E7%9C%8B%E8%86%A9%E4%BA%86%E4%B8%80%E6%88%90%E4%B8%8D%E8%AE%8A%E7%9A%84%E5%B0%8F%E9%BB%91%E7%AA%97-%E6%94%B9%E7%94%A8iterm2-oh-my-zsh%E5%90%A7-cc2b0683acb">看膩了一成不變的小黑窗？改用iterm2 + oh-my-zsh吧 | by Nathan Chou | Medium</a></li>
</ul>
<p><strong>WebStorm</strong></p>
<ul>
<li><a href="https://fpjs.fun/webstorm/general/setup/">WebStorm 安裝與設定 | 點燈坊</a></li>
</ul>
<p><strong>Mac Dev</strong></p>
<ul>
<li><a href="https://goo.gl/ZDYqar">How to set up your Mac for Web Development – freeCodeCamp.org</a></li>
<li><a href="http://goo.gl/XOrSV6">homebrew - Mac OS X Yosemite 10.10 開発環境構築 - Qiita</a>
<ul>
<li><a href="http://goo.gl/8JkuvS">Python Development Environment on Mac OS X Mavericks 10.9 | Hacker Codex</a></li>
<li><a href="http://goo.gl/5yhNGk">Set Up Python and Install Django on Mac OS X Lion 10.7 | Hacker Codex</a></li>
</ul>
</li>
<li><a href="http://goo.gl/YkCvoT">Setting Up a Mac Dev Machine From Zero to Hero With Dotfiles - Tuts+ Code Tutorial</a></li>
<li><a href="http://goo.gl/gSnCRv">MacOS 編輯器快捷建設定, short key of editor</a></li>
<li><a href="https://goo.gl/YZfREq">2018 最新 MacBook 必裝程式與設定 – Ryan Hsu – Medium</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>macOS 系統安裝紀錄 2021.Feb</title>
            <link>https://kywk.github.io/moco/posts/2021/02/macos_setup-note-2021-feb/</link>
            <pubDate>Fri, 26 Feb 2021 14:05:03 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2021/02/macos_setup-note-2021-feb/</guid>
            <description>因故拿了 MacBook Pro 2015 重灌 macOS Mojave, 記錄一下軟體安裝歷程. 隨著網頁工具越來越成熟, 電腦上必備的工具倒是越來越少.
前置軟體 Homebrew Homebrew
homebrew cask 的支援越來越多, 越來越方便, 個人多數軟體都透過 homebrew 安裝. 在開始安裝各類軟體前, Homebrew 是必要的.
$ /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; Dropbox 我的專案和軟體配置檔案 (.files) 都放在 Dropbox 上, .files 裡也存了為了新環境設定的簡單 setup.sh. 故新電腦的第二件事就是安裝 Dropbox Desktop, 把工作專案和環境配置同步到新電腦.
Google Chrome 雖已漸漸棄用 Chrome, 改用 Safari 和 Edge. 但在 Chrome 長期使用習慣, 仍無法馬上改變. 導致先安裝 Chrome 也是安裝系統的必備之一.
Sublime Text 其實開發程式的主力已經轉為 VSCode, GoLand, WebStorm&amp;hellip; 等. 但 Sublime Text 啟動速度快, 基本作業順暢, 仍是我必然安裝的工具.</description>
            <content type="html"><![CDATA[<p>因故拿了 MacBook Pro 2015 重灌 macOS Mojave, 記錄一下軟體安裝歷程.
隨著網頁工具越來越成熟, 電腦上必備的工具倒是越來越少.</p>
<!-- raw HTML omitted -->
<h2 id="前置軟體">前置軟體</h2>
<h3 id="homebrew">Homebrew</h3>
<p><strong><a href="https://brew.sh/index_zh-tw">Homebrew</a></strong></p>
<p>homebrew cask 的支援越來越多, 越來越方便,
個人多數軟體都透過 homebrew 安裝.
在開始安裝各類軟體前, Homebrew 是必要的.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ /bin/bash -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><h3 id="dropbox">Dropbox</h3>
<p>我的專案和軟體配置檔案 (.files) 都放在 <strong><a href="https://www.dropbox.com/">Dropbox</a></strong> 上,
.files 裡也存了為了新環境設定的簡單 setup.sh.
故新電腦的第二件事就是安裝 Dropbox Desktop, 把工作專案和環境配置同步到新電腦.</p>
<h3 id="google-chrome">Google Chrome</h3>
<p>雖已漸漸棄用 Chrome, 改用 Safari 和 Edge.
但在 Chrome 長期使用習慣, 仍無法馬上改變.
導致先安裝 Chrome 也是安裝系統的必備之一.</p>
<h3 id="sublime-text">Sublime Text</h3>
<p>其實開發程式的主力已經轉為 VSCode, GoLand, WebStorm&hellip; 等.
但 Sublime Text 啟動速度快, 基本作業順暢, 仍是我必然安裝的工具.</p>
<p>因安裝時 setup.sh 可能需要修改,
所以會先以 Sublime Text 開啟 setup.sh,
編改檢查後再行安裝各項軟體或依安裝情況修改配置.</p>
<p>Sublime Text 已可以用 brew 安裝.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install sublime-text
</code></pre></div><h2 id="開發工具">開發工具</h2>
<p><strong>參考 <a href="#">macOS 開發環境建構</a></strong></p>
<h2 id="生產力工具">生產力工具</h2>
<h3 id="alfred">Alfred</h3>
<p>__<a href="https://goo.gl/mD9K61">Alfred</a>__類似 Spotlight 的軟體, 但功能遠遠不止這樣.
能大大減少離開來回鍵盤和觸控板的時間, 可以參考<a href="https://goo.gl/SHsXkH">這篇教學</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install --cask alfred
</code></pre></div><h3 id="itsycal">Itsycal</h3>
<p><strong><a href="https://www.mowglii.com/itsycal/">Itsycal</a></strong> 在功能表列上便捷地查看日曆, 可以查看月曆和事件列表, 還能快速創建新事件.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install --cask itsycal
</code></pre></div><h3 id="xmind-zen">XMind Zen</h3>
<p>不得不說, 重新開發的 <strong><a href="http://www.xmind.net/">XMind Zen</a></strong> 不但跟原本的 XMind 一樣好用,
而且更美觀, 快速. 值得更換.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install --cask xmind-zen
</code></pre></div><h2 id="網路通訊">網路通訊</h2>
<h3 id="welly">Welly</h3>
<p><a href="https://github.com/clyang/welly">Welly</a>  是一套運行在 Mac 上功能豐富的BBS軟體</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install welly
</code></pre></div><h3 id="cloudmounter">CloudMounter</h3>
<p><a href="https://cloudmounter.net/">CloudMounter</a> 把网络云盘放进你的Finder里</p>
<ul>
<li><a href="https://apps.apple.com/tw/app/cloudmounter-cloud-encryption/id1130254674?l=en&amp;mt=12">Get From App Store</a></li>
</ul>
<h3 id="rclone">rclone</h3>
<p>__<a href="https://rclone.org/">rclone</a> __</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install rclone
</code></pre></div><h2 id="其他">其他</h2>
<h3 id="iina">IINA</h3>
<p><a href="https://iina.io/">IINA</a> 是 Mac 上最強大的播放器, 幾乎支援所有影音格式. 開源, UI 美觀.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install iina
</code></pre></div><h3 id="exifrenamer">ExifRenamer</h3>
<p><strong><a href="http://goo.gl/lSWZ">ExifRenamer</a></strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install exifrenamer
</code></pre></div><h3 id="mcbopomofo-小麥注音輸入法">McBopomofo 小麥注音輸入法</h3>
<p>__<a href="http://mcbopomofo.openvanilla.org/">McBopomofo 小麥注音輸入法</a> __ 反應快速，輕巧簡單, 為 Mac User 量身打造.
支援標準、倚天、許氏、倚天26 鍵、IBM 以及漢語拼音鍵盤配置</p>
<ul>
<li><a href="https://osxchat.tumblr.com/post/29205181318/mcbopomofo-hidden-settings">小麥注音的隱藏設定</a></li>
</ul>
<h2 id="see-also">See Also</h2>
<h3 id="遺珠">遺珠</h3>
<p>以下是曾為個人熱愛, 但因故越來越少用的軟體. 暫列於此&hellip;</p>
<ul>
<li><a href="https://goo.gl/0Ll1DU">Magnet</a><br>
分割視窗軟體, 支援「拖曳視窗到螢幕邊界後會自動分割」的功能</li>
<li><a href="https://typora.io/">Typora</a><br>
基於 Markdown 開源的 IDE</li>
<li><a href="https://goo.gl/Jwx6Sx">截圖</a><br>
截圖除了豐富的標註工具, 支援 QR Code 跨螢幕傳圖, 倒數計時截圖, 標籤與貼紙等功能</li>
<li><a href="http://meetfranz.com/">Franz</a><br>
集大成的 IM 通訊軟體, 在同一個視窗內使用 Slack, Messenger, Telegram, &hellip;</li>
<li><a href="https://headsetapp.co/">Headset</a><br>
極為好用的 Youtube 免費線上音樂播放工具! 豐富歌單, 電台以及個人收藏功能</li>
<li><a href="https://www.macbartender.com/">BarTender3</a>,
<a href="https://free.com.tw/dozer-mac/">Dozer</a><br>
有效管理 status bar 出現的 icon, 軟體一多很好用</li>
</ul>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="https://goo.gl/xYCwZa">實用 Mac Apps 推薦 – 魏志軒 – Medium</a></li>
<li><a href="https://goo.gl/YZfREq">2018 最新 MacBook 必裝程式與設定 – Ryan Hsu – Medium</a></li>
<li><a href="https://goo.gl/Z9BKtx">Cask 讓 OSX 安裝軟體更有效率 | VISIONCAN</a> | <a href="https://goo.gl/y7AU5x">list</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Google Team Drive 無限空間申請</title>
            <link>https://kywk.github.io/moco/posts/2021/02/gd_team-drive-signup/</link>
            <pubDate>Fri, 19 Feb 2021 11:35:05 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2021/02/gd_team-drive-signup/</guid>
            <description>!!!!! 重要更新 !!!!! Google 已經公告 2021/07/01 起不再提供教育版無限空間.
以下免費團隊硬碟多為教育版空間, 勢必會陸續被收回. 本篇文章不再更新.
個人在 Team Drive 上的資料該如何逃難, 方案還在比較. 等資料移轉順利後再另發文了.
Google Drive 團隊硬碟 Google 針對商業和教育用戶推出了 Team Drive (團隊硬碟), 上傳到團隊硬碟中的檔案, 所有權屬於該團隊硬碟管理員和團隊管理員, 可解決員工離職後員工所存放的檔案失效的問題. 團隊硬碟也可以分享給團隊外的成員, 和外部廠商合作時可以讓廠商上傳檔案. 由於檔案所有權屬於管理員, 也可避免廠商擅自移除檔案.
Google Drive 團隊硬碟在線自助領取 目前團隊硬碟的容量為無限容量, 也未限制每個用戶能開設的團隊硬碟數量, 故有些企業或教育用戶管理員開放大眾使用該組織的團隊硬碟.
這樣的使用並不完全符合 Google 規範, 且管理員也有權隨時取消團隊硬碟. 使用前還是要先評估.
近來 Google 對於無限容量服務策略有不少調整, 無限空間可能隨時會被 Google 取消收回, 使用相關服務請三思. 可以拿來存放網路資源, 加密異地備份, 但避免存放個人重要資料.
系列文還在編寫的同時, 之前申請的某個團隊營碟就硬生生消失了. 別把重要資料放團隊碟, 多申請幾組, 設定備份才是使用團隊硬碟較為保險的方式.
下列申請網址隨時可能失效, 有些達到 API 單日上限, 隔日再試即可.
 绿野蓬莱岛 多合一: https://penglai.ga/ 英國老牌名校謝菲爾德大學團隊盤: https://gdrive.zppcw.cn  failed at 2021-01-14</description>
            <content type="html"><![CDATA[<h2 id="-重要更新-">!!!!! 重要更新 !!!!!</h2>
<p>Google 已經公告 2021/07/01 起不再提供教育版無限空間.<br>
以下免費團隊硬碟多為教育版空間, 勢必會陸續被收回. 本篇文章不再更新.</p>
<p>個人在 Team Drive 上的資料該如何逃難, 方案還在比較.
等資料移轉順利後再另發文了.</p>
<h2 id="google-drive-團隊硬碟">Google Drive 團隊硬碟</h2>
<p>Google 針對商業和教育用戶推出了 Team Drive (團隊硬碟),
上傳到團隊硬碟中的檔案, 所有權屬於該團隊硬碟管理員和團隊管理員,
可解決員工離職後員工所存放的檔案失效的問題.
團隊硬碟也可以分享給團隊外的成員, 和外部廠商合作時可以讓廠商上傳檔案.
由於檔案所有權屬於管理員, 也可避免廠商擅自移除檔案.</p>
<h2 id="google-drive-團隊硬碟在線自助領取">Google Drive 團隊硬碟在線自助領取</h2>
<p>目前團隊硬碟的容量為無限容量, 也未限制每個用戶能開設的團隊硬碟數量,
故有些企業或教育用戶管理員開放大眾使用該組織的團隊硬碟.</p>
<p><strong>這樣的使用並不完全符合 Google 規範, 且管理員也有權隨時取消團隊硬碟. 使用前還是要先評估.</strong></p>
<p>近來 Google 對於無限容量服務策略有不少調整, 無限空間可能隨時會被 Google 取消收回, 使用相關服務請三思.
可以拿來存放網路資源, 加密異地備份, 但避免存放個人重要資料.</p>
<p><strong>系列文還在編寫的同時, 之前申請的某個團隊營碟就硬生生消失了.</strong>
<strong>別把重要資料放團隊碟, 多申請幾組, 設定備份才是使用團隊硬碟較為保險的方式.</strong></p>
<p><em>下列申請網址隨時可能失效, 有些達到 API 單日上限, 隔日再試即可.</em></p>
<ul>
<li>绿野蓬莱岛 多合一: <a href="https://penglai.ga/">https://penglai.ga/</a></li>
<li>英國老牌名校謝菲爾德大學團隊盤: <a href="https://gdrive.zppcw.cn">https://gdrive.zppcw.cn</a></li>
</ul>
<p><em>failed at 2021-01-14</em></p>
<ul>
<li><del>無限次免費Google TeamDrive: <a href="https://td.fastio.me">https://td.fastio.me</a></del></li>
<li><del>yesyesxx.me: <a href="https://gd.zxd.workers.dev/">https://gd.zxd.workers.dev/</a></del></li>
<li><del>台灣中正大學團隊盤: <a href="https://gd.404edu.workers.dev/">https://gd.404edu.workers.dev/</a></del></li>
<li><del>404 NOT FOUND團隊盤: <a href="http://leon.educationhost.cloud">http://leon.educationhost.cloud</a></del></li>
</ul>
<h2 id="google-drive-團隊硬碟領取方式">Google Drive 團隊硬碟領取方式</h2>
<p>發文時只剩第一組連結能成功申請, 以下說明以該服務為例, 其他連結申請方式大同小異.</p>
<p>申請方式相當簡單, 僅需提供想創建的團隊硬碟名稱以及一組 GMail 即可.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3ducDNLej9_d4oGUoBSqOyMg0ow3SZE2ata_nVHjAM3Leq-JJbOAk_I4CR37NGuAAFVdDLW1cB_umiXPiN2CycbPHCJI_HLzKhrNKoQbL3lGyCS-ivjdI4zCLmjr3_vI9Aroq1zZzhQhDwLfBwdxgWL0g=w557-h637-no?authuser=0" alt=""></p>
<p><strong>再次強調, 這樣的使用並不完全符合 Google 規範, 建議使用小號申請該服務</strong></p>
<p>申請成功後即可在 Google Drive 裡共用雲端硬碟看到剛剛新增的團隊硬碟.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3f3uGznIhBHl6wx59Q-9Uw3-lKdZhkACvQ3lJ7V_jDuFgikirN1WLBoobSFPfhwR2vtLmfaxeOCTIKzGB6c93uH9eIoYGBN6_wk_eECrTH2Nu5amz6vsPeez0QjwiJQ_UHERMPQUiC13JhQhE3Si39Luw=w603-h730-no?authuser=0" alt=""></p>
<p>因為是用小號申請的, 使用時需切換帳號.<br>
若希望不切換帳號快速存取硬碟, 可透過管理成員, 把主要帳號加入團隊硬碟管理員.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3cCntHjbyEr94JMuqlB0GgTe2dZqSclbCnxOAtiWGT-dqN0XsX25gtv-TXTxs3ZeD6EGQNN2Z_9Owg_EGg5uiT6LO6HzkvEPA0W5vvPVZ0dDMGwltGY70cMf0dqZQOPiLIjSVs-8mF-0zR5OOIVX9GvFg=w694-h722-no?authuser=0" alt=""></p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3cqIiXDLMJiRwGZxgOk1YKqe8zLTPZN71U0JlaCEtT79PsIjT3DSwSR_RVQASOsoI4T9M-clemg5g2pOcxaIgSE_hxCZFQWKFLhEKRSUzN_Wd6SB8BgIc3bDWzI7ijarA391IrcHF1fqIWwsbjq1J6H9g=w652-h356-no?authuser=0" alt=""></p>
<p>這樣一來, 主帳號的共用雲端硬碟中就可看到剛剛新增的團隊硬碟, 方便直接使用主帳號來管理檔案.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3eGG1rB0uw5DD4qaNDlSYTVzISkevn8c7ImHyhkvpd8YQLnfyi7sNJ1ZiDPJGt54Nw3rFkWOgCBuJImhwyRVSRDwFFUZ58Nc79xeorNR66sBL4NFkNypuD0Xu4j-vYt61lo8HmoqSFf2LkoGdFDd7TE8g=w467-h307-no?authuser=0" alt=""></p>
<p>當然, 如果對帳號安全性比較敏感的, 不要關聯到主帳號比較妥當.<br>
畢竟生殺大權在 Google 手上, 誰也不敢保證未來的變化會如何.</p>
<p>且後續要介紹的 rclone / autorclone 用小號就可以進行操作, 無須使用主帳號.</p>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://zh.vpnclub.cc/get-google-drive-unlimited-storage-plan/">Google Drive 雲端硬碟無限容量不用購買免費取得開通教學文 | 跳板俱樂部</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>利用 youtube-dl 下載 Youtube 影片</title>
            <link>https://kywk.github.io/moco/posts/2021/02/yt_youtube-dl/</link>
            <pubDate>Sun, 07 Feb 2021 11:46:48 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2021/02/yt_youtube-dl/</guid>
            <description>一直都是利用播放清單和 Like 來當作 Youtube 影片的書籤. 不過陸續發現有些影片會無預期被刪除或改為私人影片, 也有些頻道會莫名消失.
單純音樂類的播放清單就算了, 但有些專業參考性質的影片需要時找不到, 故發起把影片下載保存的念頭,
網路上有不少下載 Youtube 影片的線上網站和 App, 試用過後最後回到最適合工程師的 youtube-dl
youtube-dl youtube-dl 是個 OpenSource 專案, 有興趣研究的可在 GitHub 上 Fork 專案.
日前曾因可能違反 DMCA 而導致 GitHub 上所有 youtube-dl 專案都被下架. (是的, 不單 youtube 影片可能下架, 連下載工具都可能被下架) 所幸後來在眾多熱心法律專業人士協助下, 確認並不違反 DMCA 而恢復專案. 完整故事可到官方 blog 查看.
install Mac 上透過 brew 安裝 youtube-dl 相當簡單.
$ brew install youtube-dl ffmpeg youtube-dl 是 python script, 利用 python 適合寫爬蟲的特性, 解析 youtube 影片位置並下載. 目前 youtube 網站中高畫質格式多為 video-only 或 audio-only 的 webm 格式, 傳統 mp4 格式大多只到 720p.</description>
            <content type="html"><![CDATA[<p>一直都是利用播放清單和 Like 來當作 Youtube 影片的書籤.
不過陸續發現有些影片會無預期被刪除或改為私人影片, 也有些頻道會莫名消失.</p>
<p>單純音樂類的播放清單就算了, 但有些專業參考性質的影片需要時找不到,
故發起把影片下載保存的念頭,</p>
<p>網路上有不少下載 Youtube 影片的線上網站和 App,
試用過後最後回到最適合工程師的 <a href="https://youtube-dl.org/">youtube-dl</a></p>
<!-- raw HTML omitted -->
<h2 id="youtube-dl">youtube-dl</h2>
<p><a href="https://youtube-dl.org/">youtube-dl</a> 是個 OpenSource 專案,
有興趣研究的可在 <a href="https://github.com/ytdl-org/youtube-dl/">GitHub</a> 上 Fork 專案.</p>
<p>日前曾因可能違反 DMCA 而導致 GitHub 上所有 youtube-dl 專案都被下架.
(是的, 不單 youtube 影片可能下架, 連下載工具都可能被下架)
所幸後來在眾多熱心法律專業人士協助下, 確認並不違反 DMCA 而恢復專案.
<a href="https://github.blog/2020-11-16-standing-up-for-developers-youtube-dl-is-back/">完整故事可到官方 blog 查看</a>.</p>
<h3 id="install">install</h3>
<p>Mac 上透過 brew 安裝 youtube-dl 相當簡單.</p>
<pre><code>$ brew install youtube-dl
</code></pre><h3 id="ffmpeg">ffmpeg</h3>
<p>youtube-dl 是 python script, 利用 python 適合寫爬蟲的特性, 解析 youtube 影片位置並下載.
目前 youtube 網站中高畫質格式多為 video-only 或 audio-only 的 webm 格式,
傳統 mp4 格式大多只到 720p.
而 youtube-dl 只能下載影片, 無法轉換影片格式, 若想下載更高畫質的影片,
則需安裝 <a href="https://www.ffmpeg.org/">ffmpeg</a> 來轉檔, 嵌入字幕, 提取音頻, 加入專輯封面等等 Post-processing.</p>
<pre><code>$ brew install ffmpeg
</code></pre><h2 id="usage">Usage</h2>
<p>基本使用只要輸入 youtube 網址後就會開始下載, 預設是最佳影片格式.
若沒有安裝 ffmpeg 通常會下載 720p 的 mp4 檔,
有安裝 ffmpeg 則會下載最佳畫質的 video 和 audio 後合併.</p>
<pre><code>$ youtube-dl https://www.youtube.com/watch?v=rkAfWfZkfyo

[youtube] rkAfWfZkfyo: Downloading webpage
[youtube] rkAfWfZkfyo: Downloading video info webpage
[download] Resuming download at byte 31858886
[download] Destination: 4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.f313.webm
[download] 100% of 634.40MiB in 01:10
[download] Destination: 4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.f251.webm
[download] 100% of 5.43MiB in 00:00
[ffmpeg] Merging formats into &quot;4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.webm&quot;
Deleting original file 4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.f313.webm (pass -k to keep)
Deleting original file 4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.f251.webm (pass -k to keep)
</code></pre><h3 id="下載指定格式">下載指定格式</h3>
<p>Youtube-dl 預設會下載最高畫質的影片, 但可以自己選擇想要的品質</p>
<p>Ex: 下載解析度不高於 480p 的影片</p>
<pre><code>$ youtube-dl -f 'bestvideo[height&lt;=480][ext=mp4]+bestaudio/best[height&lt;=480][ext=m4a]' &lt;url&gt;
</code></pre><p><strong>下載不同畫質與格式</strong></p>
<p>預設會下載最高畫質的影片, 如果要不同畫質可以先使用 -F, 會列出這個影片所有的畫質與格式</p>
<pre><code>$ youtube-dl -F https://www.youtube.com/watch?v=rkAfWfZkfyo

[youtube] rkAfWfZkfyo: Downloading webpage
[youtube] rkAfWfZkfyo: Downloading video info webpage
[info] Available formats for rkAfWfZkfyo:
format code  extension  resolution note
249          webm       audio only DASH audio   56k , opus @ 50k, 2.11MiB
250          webm       audio only DASH audio   75k , opus @ 70k, 2.79MiB
140          m4a        audio only DASH audio  128k , m4a_dash container, mp4a.40.2@128k, 5.14MiB
171          webm       audio only DASH audio  135k , vorbis@128k, 5.05MiB
251          webm       audio only DASH audio  141k , opus @160k, 5.43MiB
278          webm       256x144    144p   99k , webm container, vp9, 30fps, video only, 3.57MiB
160          mp4        256x144    144p  111k , avc1.4d400c, 30fps, video only, 2.79MiB
242          webm       426x240    240p  229k , vp9, 30fps, video only, 7.42MiB
133          mp4        426x240    240p  246k , avc1.4d4015, 30fps, video only, 5.85MiB
243          webm       640x360    360p  453k , vp9, 30fps, video only, 13.89MiB
134          mp4        640x360    360p  635k , avc1.4d401e, 30fps, video only, 16.18MiB
244          webm       854x480    480p  858k , vp9, 30fps, video only, 25.31MiB
135          mp4        854x480    480p 1337k , avc1.4d401f, 30fps, video only, 32.15MiB
247          webm       1280x720   720p 2100k , vp9, 30fps, video only, 52.51MiB
136          mp4        1280x720   720p 2673k , avc1.4d401f, 30fps, video only, 62.45MiB
248          webm       1920x1080  1080p 3857k , vp9, 30fps, video only, 94.03MiB
137          mp4        1920x1080  1080p 5017k , avc1.640028, 30fps, video only, 110.63MiB
271          webm       2560x1440  1440p 8886k , vp9, 30fps, video only, 281.05MiB
313          webm       3840x2160  2160p 18240k , vp9, 30fps, video only, 634.40MiB
43           webm       640x360    medium , vp8.0, vorbis@128k, 34.71MiB
18           mp4        640x360    medium  670k , avc1.42001E, mp4a.40.2@ 96k (44100Hz), 27.12MiB
22           mp4        1280x720   hd720 1670k , avc1.64001F, mp4a.40.2@192k (44100Hz) (best)
</code></pre><p>要下載不同格式使用 <code>-f 'video code+audio code</code> 就可以抓不同畫質與音質的影片.</p>
<p>例如要抓 1280x720 的畫質, 就選 video code 136 跟 audio code 140, 這樣 youtube-dl 就會抓對應的畫質與音質的影片下來了</p>
<pre><code>$ youtube-dl -f '136+140' https://www.youtube.com/watch?v=rkAfWfZkfyo
</code></pre><h3 id="下載播放清單">下載播放清單</h3>
<p>輸入播放清單網址, youtube-dl 則會自動下載清單.
除了影片網址的部分改成影片清單的網址, 其他部分和下載影片一樣。</p>
<pre><code>$ youtube-dl -f mp4 &lt;playlist-url&gt;
</code></pre><p><strong>指定起點和終點</strong></p>
<ul>
<li><code>--playlist-start NUMBER</code> 指定起點</li>
<li><code>—-playlist-end NUMBER</code> 指定終點</li>
</ul>
<p>Ex: 從第三個影片開始下載到最後一個影片</p>
<pre><code>$ youtube-dl --playlist-start 3 -f mp4 &lt;playlist-url&gt;
</code></pre><p>Ex: 從第一個影片下載到倒數第二個影片</p>
<pre><code>$ youtube-dl --playlist-end 2 -f mp4 &lt;playlist-url&gt;
</code></pre><p>Ex: 從第三個影片開始下載到倒數第二個影片</p>
<pre><code>$ youtube-dl --playlist-start 3 --playlist-end 2 -f mp4 &lt;playlist-url&gt;
</code></pre><p><strong>使用下載清單</strong></p>
<p>若播放清單影片太多, 所需下載時間長, 可能必須分次執行時,
可以使用已下載清單的功能, 已避免重複下載.</p>
<pre><code>$ youtube-dl --download-archive downloaded.txt -ciw &lt;playlist-url&gt;
</code></pre><p>With the option <code>--download-archive FILE</code> youtube-dl both reads and adds to a list of files not to download again.
Every time a file is successfully downloaded, that video id is added to FILE.</p>
<p><strong>建立已下載清單</strong></p>
<p>若之前下載時忘了建立清單, 可透過下列 script 把既有的檔案輸出成已下載清單,
建立完成後再透過上述指令接續下載.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> n in *.*
  <span style="color:#66d9ef">do</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span>$n<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span>~ -<span style="color:#f92672">[</span>-_0-9a-zA-Z<span style="color:#f92672">]{</span>11<span style="color:#f92672">}</span>.*$ <span style="color:#f92672">]]</span>
      <span style="color:#66d9ef">then</span> echo <span style="color:#e6db74">&#34;youtube </span><span style="color:#e6db74">${</span>n: -15: 11<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> &gt;&gt; downloaded.txt
    <span style="color:#66d9ef">fi</span>
<span style="color:#66d9ef">done</span>
</code></pre></div><h2 id="see-also">See Also</h2>
<p>以上筆記為超濃縮版, youtube-dl 還有更多強大的功能和參數可供使用.
如果要更詳細的參考文件, 可以直接參考官方文件: <a href="https://github.com/rg3/youtube-dl">https://github.com/rg3/youtube-dl</a></p>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="https://ianwu.tw/press/topic/command_line_program/youtube-dl.html">youtube-dl | 院長的筆記本</a></li>
<li><a href="https://yogapan.github.io/2017/08/16/Youtube-dl%E6%BF%83%E7%B8%AE%E6%95%99%E5%AD%B8%E7%AD%86%E8%A8%98/">Youtube-dl濃縮教學筆記 | 小蛇蛇的筆記</a></li>
<li><a href="https://askubuntu.com/questions/673442/downloading-youtube-playlist-with-youtube-dl-skipping-existing-files">Downloading youtube playlist with youtube-dl, skipping existing files - Ask Ubuntu</a></li>
</ul>
<h3 id="gui-downloader">GUI Downloader</h3>
<ul>
<li><a href="https://freetubeapp.io/">FreeTube - The Private YouTube Client</a>
<ul>
<li><a href="https://www.kocpc.com.tw/archives/355689">FreeTube 免費 YouTube 播放工具，無廣告、支援影片與音樂下載、訂閱功能 - 電腦王阿達</a></li>
</ul>
</li>
<li><a href="http://www.gihosoft.com/free-youtube-downloader.html">Gihosoft TubeGet - Free YouTube Downloader for PC &amp; Mac</a>
<ul>
<li><a href="https://applefans.today/gihosoft-tubeget-download-youtube/">如何在 Mac 下載 YouTube 1080P 高清影片 – APPLEFANS 蘋果迷</a></li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Tar 加密打包語法</title>
            <link>https://kywk.github.io/moco/posts/2020/12/cli_encrypt-tarball/</link>
            <pubDate>Thu, 10 Dec 2020 17:31:07 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/12/cli_encrypt-tarball/</guid>
            <description>網路上免費創建團隊硬碟理論上創建者是團隊硬碟管理員, 但實際上所有的團隊硬碟仍受 Google GSuite / Workspace 機構管理員管轄. 機構管理員雖然無法直接存取檔案, 但有權將檔案擁有者轉移給他人. 如果只是存放網路上載來的資源就算了, 若是存放個人檔案, 仍建議加密壓縮.
TarBall Tar 支援 gzip, bz2, xz&amp;hellip; 等多種壓縮方式, 但 tar 並不支援加密. 在命令列模式下要加密 tarball, 需透過其他指令來完成, 最常用的是 openssl.
加密 簡單指令如下: (僅加密打包不壓縮)
$ tar cvf - FILE_NAME | openssl des3 -salt -k passw0rd -out /path/to/file.tar 這個指令主要分成兩部分
第一部分是 tar cvf - FILE_NAME, 意思是針對 FILE_NAME 進行打包, 其中三個參數的意思是:
 c: create 創建一個新的 tarball 文件 v: verbose 輸出詳細的處理過程 f:file 需要打包的檔案 (Unix 下一切都是檔案, 資料夾也屬於檔案)  第二部分是 openssl des3 -salt -k passw0rd -out /path/to/file.</description>
            <content type="html"><![CDATA[<p>網路上免費創建團隊硬碟理論上創建者是團隊硬碟管理員,
但實際上所有的團隊硬碟仍受 Google GSuite / Workspace 機構管理員管轄.
機構管理員雖然無法直接存取檔案, 但有權將檔案擁有者轉移給他人.
如果只是存放網路上載來的資源就算了, 若是存放個人檔案, 仍建議加密壓縮.</p>
<h2 id="tarball">TarBall</h2>
<p>Tar 支援 gzip, bz2, xz&hellip; 等多種壓縮方式, 但 tar 並不支援加密.
在命令列模式下要加密 tarball, 需透過其他指令來完成, 最常用的是 openssl.</p>
<h3 id="加密">加密</h3>
<p>簡單指令如下: (僅加密打包不壓縮)</p>
<pre><code>$ tar cvf - FILE_NAME | openssl des3 -salt -k passw0rd -out /path/to/file.tar
</code></pre><p>這個指令主要分成兩部分</p>
<p>第一部分是 <code>tar cvf - FILE_NAME</code>, 意思是針對 FILE_NAME 進行打包,
其中三個參數的意思是:</p>
<ul>
<li>c: create 創建一個新的 tarball 文件</li>
<li>v: verbose 輸出詳細的處理過程</li>
<li>f:file 需要打包的檔案 (Unix 下一切都是檔案, 資料夾也屬於檔案)</li>
</ul>
<p>第二部分是 <code>openssl des3 -salt -k passw0rd -out /path/to/file.tar</code>
意思是針對文件透過 des3 加密, 其中參數的意思是:</p>
<ul>
<li>des3 指定用來加密的演算法, 常見有三種 des, des3, idea</li>
<li>salt 為密碼添加一個隨機數, 和 <code>-k</code> 一起使用, 可防範字典攻擊</li>
<li>k 指定的密碼</li>
<li>out 輸出文件名字</li>
</ul>
<h3 id="解密">解密</h3>
<pre><code>$ openssl des3 -d -k passw0rd -salt -in /path/to/file.tar.gz | tar xvf -
</code></pre><p>這指令剛好把加密打包的行為反過來. 先透過 openssl 把檔案解密後, 再利用 tar 解開 tarball 內容.</p>
<h3 id="alias">alias</h3>
<p>整理資料時需大量的打包檔案, 未避免輸入時手誤打錯密碼,
直接在 bashrc 中新增加密和解密的 alias, 把密碼固定寫在 alias 中,
這樣加密打包時無須輸入一長串命令, 也不用擔心手誤 key 錯密碼.</p>
<pre><code class="language-sh.rc" data-lang="sh.rc">alias ens='openssl des3 -salt -k passw0rd '
alias des='openssl des3 -d -salt -k passw0rd '
</code></pre><pre><code># 加密打包
$ tar cvf - FILE_NAME | ens -out FILE_NAME.tar.x
# 解密
$ des -in FILE_NAME.tar.x | tar xvf -
</code></pre><h2 id="see-also">See Also</h2>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="http://note.drx.tw/2008/04/command.html">GNU / Linux 各種壓縮與解壓縮指令 | 凍仁的筆記</a></li>
<li><a href="https://www.itread01.com/content/1551377067.html">tar命令加密壓縮 - IT閱讀</a></li>
<li><a href="https://www.itread01.com/content/1547949421.html">Linux tar加密壓縮解壓 - IT閱讀</a></li>
<li><a href="http://blog.changyy.org/2014/06/linux-openssl-des3-ubuntu-1404.html">第二十四個夏天後: [Linux] 使用 Openssl 做簡易的(DES3)加密、解密 @ Ubuntu 14.04</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Setup Rclone for Google Team Drive on macOS</title>
            <link>https://kywk.github.io/moco/posts/2020/12/gd_rclone-config/</link>
            <pubDate>Mon, 07 Dec 2020 17:35:35 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/12/gd_rclone-config/</guid>
            <description>針對 Google Drive 個人與商業用戶, Google 分別提供了 Backup and Sync 以及 DriveFS 兩個桌面軟體以便操作, 但無論是 Backup and Sync 還是 DriveFS 都不支援 Team Drive, 無法在桌面環境下操作 Team Drive, 只能透過網頁端處理.
所幸萬能的 Rclone 有支援 Team Drive. Rclone Rclone 是一個非常好用的雲端硬碟管理工具, 在命令模式下直接針對多數雲端硬碟服務進行操作, 搭配其他系統工具, 可自動化雲端硬碟的管理, 包括異地備份, 打包, 移除老舊檔案&amp;hellip; 等等.
目前 Rclone 支援的雲端硬碟服務多達 38 種, 其中本篇的重點在第 13 項 &amp;ldquo;Google Drive&amp;rdquo;.
注意: 第 12 項的 Google Cloud Storage 並不是 Google Drive, 而是 GCP 中類似 AWS S3 的服務.
Install rclone on macOS 在 macOS 透過 homebrew 安裝的 rclone 目前不支援 mount 命令.</description>
            <content type="html"><![CDATA[<p>針對 Google Drive 個人與商業用戶, Google 分別提供了 Backup and Sync 以及 DriveFS 兩個桌面軟體以便操作,
但無論是 Backup and Sync 還是 DriveFS 都不支援 Team Drive,
無法在桌面環境下操作 Team Drive, 只能透過網頁端處理.</p>
<p>所幸萬能的 Rclone 有支援 Team Drive.  </p>
<h2 id="rclone">Rclone</h2>
<p><strong><a href="https://rclone.org/">Rclone</a></strong> 是一個非常好用的雲端硬碟管理工具, 在命令模式下直接針對多數雲端硬碟服務進行操作,
搭配其他系統工具, 可自動化雲端硬碟的管理, 包括異地備份, 打包, 移除老舊檔案&hellip; 等等.</p>
<p>目前 Rclone 支援的雲端硬碟服務多達 38 種, 其中本篇的重點在第 13 項 &ldquo;Google Drive&rdquo;.</p>
<p><strong>注意:</strong> 第 12 項的 Google Cloud Storage 並不是 Google Drive, 而是 GCP 中類似 AWS S3 的服務.</p>
<h2 id="install-rclone-on-macos">Install rclone on macOS</h2>
<p>在 macOS 透過 homebrew 安裝的 rclone 目前不支援 mount 命令.
不過目前我的使用情境還不需要 mount 遠端硬碟, 所以無腦使用 Homebrew 安裝:</p>
<pre><code>$ brew install rclone

Homebrew's installation does not include the `mount` subcommand on MacOS.

zsh completions have been installed to:
  /usr/local/share/zsh/site-functions

/usr/local/share/zsh/site-functions is not in your zsh FPATH!
Add it by following these steps:
  https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh
</code></pre><h3 id="zsh-auto-completion">zsh auto completion</h3>
<p>T.B.C</p>
<h2 id="configure-team-drive">Configure team drive</h2>
<p>透過 brew 安裝 rclone 通常不會出錯, 安裝完後可以準備進行設定.
輸入 <code>rclone config</code> 後會進入設定模式.</p>
<pre><code>$ rclone config

e) Edit existing remote
n) New remote
d) Delete remote
r) Rename remote
c) Copy remote
s) Set configuration password
q) Quit config
e/n/d/r/c/s/q&gt;  n 
name&gt;  it-if-bimgo 
</code></pre><p>先選擇 <code>n</code> 新增一組遠端硬碟, 取個自己喜歡且方便辨識的名稱</p>
<pre><code>Type of storage to configure.
Enter a string value. Press Enter for the default (&quot;&quot;).
Choose a number from below, or type in your own value
...
11 / FTP Connection
   \ &quot;ftp&quot;
12 / Google Cloud Storage (this is not Google Drive)
   \ &quot;google cloud storage&quot;
13 / Google Drive
   \ &quot;drive&quot;
14 / Google Photos
   \ &quot;google photos&quot;
 ...   
Storage&gt; 13
</code></pre><p>接著要選擇遠端硬碟的類型, 這篇介紹的是 Google Drive, 選 13.</p>
<pre><code>** See help for drive backend at: https://rclone.org/drive/ **

Google Application Client Id
Setting your own is recommended.
See https://rclone.org/drive/#making-your-own-client-id for how to create your own.
If you leave this blank, it will use an internal key which is low performance.
Enter a string value. Press Enter for the default (&quot;&quot;).
client_id&gt; 9847344-xxx-xxx-xxx
OAuth Client Secret
Leave blank normally.
Enter a string value. Press Enter for the default (&quot;&quot;).
client_secret&gt; a6AZxxxxxxxx
</code></pre><p>依循 <a href="https://rclone.org/drive/#making-your-own-client-id">Google drive | rclone</a> 的說明,
申請 Google Drive API 以及 App client_id 和 client_secret, 填入.
不知道如何申請也可留空, 不過指令執行效率會較差.</p>
<pre><code>Scope that rclone should use when requesting access from drive.
Enter a string value. Press Enter for the default (&quot;&quot;).
Choose a number from below, or type in your own value
 1 / Full access all files, excluding Application Data Folder.
   \ &quot;drive&quot;
 2 / Read-only access to file metadata and file contents.
   \ &quot;drive.readonly&quot;
   / Access to files created by rclone only.
 3 | These are visible in the drive website.
   | File authorization is revoked when the user deauthorizes the app.
   \ &quot;drive.file&quot;
   / Allows read and write access to the Application Data folder.
 4 | This is not visible in the drive website.
   \ &quot;drive.appfolder&quot;
   / Allows read-only access to file metadata but
 5 | does not allow any access to read or download file content.
   \ &quot;drive.metadata.readonly&quot;
scope&gt; 1
</code></pre><p>接著選擇這個 Remote 的存取權限, 通常選 1, 完整存取的權限.</p>
<pre><code>ID of the root folder
Leave blank normally.

Fill in to access &quot;Computers&quot; folders (see docs), or for rclone to use
a non root folder as its starting point.

Enter a string value. Press Enter for the default (&quot;&quot;).
root_folder_id&gt;
</code></pre><p>設定預設根目錄的 ID. 以團隊碟來說留空即可.</p>
<pre><code>Service Account Credentials JSON file path
Leave blank normally.
Needed only if you want use SA instead of interactive login.

Leading `~` will be expanded in the file name as will environment variables such as `${RCLONE_CONFIG_DIR}`.

Enter a string value. Press Enter for the default (&quot;&quot;).
service_account_file&gt;
</code></pre><p>Service Account 將在後篇介紹, 這邊先留空即可</p>
<pre><code>Edit advanced config? (y/n)
y) Yes
n) No (default)
y/n&gt; n
Remote config
Use auto config?
 * Say Y if not sure
 * Say N if you are working on a remote or headless machine
y) Yes (default)
n) No
y/n&gt;
If your browser doesn't open automatically go to the following link: http://127.0.0.1:53682/auth?state=qQkpxmh1iDjj0kmwp4weGw
Log in and authorize rclone for access
Waiting for code...
</code></pre><p>進階設定和自動設定都直接按 Enter 以預設值即可, 接著會自動打開網頁, 需要網站上同意 rclone 存取 Google Drive.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3ecAsml5AprwhfVG3ZFgUqwPlOzVd5imrLPKzUTeQPTGusvxLr556E5_SKQTvPwhyM1i14luzwrycNlSaEncdDfdT7HP8x6siJlsHkMZUz30KAqtMSttstvpJO_ysjLgL-BttXGvvdxbiwFfkcuOt1iZA=w469-h624-no?authuser=0" alt=""></p>
<pre><code>Log in and authorize rclone for access
Waiting for code...
Got code
Configure this as a team drive?
y) Yes
n) No (default) 
y/n&gt; y
Fetching team drive list...
Choose a number from below, or type in your own value
 1 / if.bimgo
   \ &quot;0AMxxxxxxxxxxxxxxxx&quot;
 2 / i.bimgo
   \ &quot;0APxxxxxxxxxxxxxxxx&quot;
 3 / i.hcc
   \ &quot;0AHxxxxxxxxxxxxxxxx&quot;
 4 / i.vip
   \ &quot;0AHxxxxxxxxxxxxxxxx&quot;
Enter a Team Drive ID&gt; 1
</code></pre><p>網頁授權成功後, rclone 會詢問這組 remote 是否為 team drive, 選 y.
此時 rclone 會自動抓取所有的團隊硬碟, 選擇所要對應的團隊硬碟.</p>
<pre><code>--------------------
[it-if-bimgo]
type = drive
client_id = 9847344-xxx-xxx-xxx
client_secret = a6AZxxxxxxxx
scope = drive
token = {xxxxxx}
team_drive = 0AMxxxxxxxxxxxxxxxx
root_folder_id =
--------------------
y) Yes this is OK (default)
e) Edit this remote
d) Delete this remote
y/e/d&gt; y
</code></pre><p>最後再確認上述資訊是否正確, 若無誤選 y 保存. rclone 就設定完成了.</p>
<h3 id="test">Test</h3>
<pre><code>$ rclone mkdir it-if-bimgo:Test                                                    915  2.29    17:25:45 
$ rclone lsd it-if-bimgo:                                                          917  2.31    17:26:04 
          -1 2020-12-08 17:25:56        -1 Test
</code></pre><p>測試方式很簡單, 先透過 rclone mkdir 建立一個空資料夾,
再透過 rclone lsd 確認該資料夾是否存在.
亦可開網頁確認:</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3cNRVBXgzQV003vslOd5Ms4tIA_w_VcT6Z-6t_vm4BMxy-cDnDETos5QyNXCpNnONFWp5uNhpw046yRyNwmTchdaNY5QttX3IiYhb8Ve8bBlPEgK0Nhx5P15WXEmoUgofpudjZYTLwYhLXXdgZ6N-nEfw=w545-h148-no?authuser=0" alt=""></p>
<p>這篇文章有更多 rclone 常用指令的介紹: <a href="http://jdev.tw/blog/4746/rclone-cloud-storage-command-line">用rclone命令行指令簡化雲端儲存服務的各項檔案操作 | 簡睿隨筆 | 學習過程的紀錄與備忘</a></p>
<h3 id="drive-server-side-across">drive-server-side-across</h3>
<p>Rclone 在 Google 雲端硬碟有支援一項<a href="https://rclone.org/drive/#drive-server-side-across-configs">特殊的設定</a>, 可以直接在伺服器端進行傳輸:</p>











  





  


<blockquote>
  <p><p>&ndash;drive-server-side-across-configs<br>
Allow server side operations (eg copy) to work across different drive configs.<br>
This can be useful if you wish to do a server side copy between two different Google drives. Note that this isn’t enabled by default because it isn’t easy to tell if it will work between any two configurations.</p>
<ul>
<li>Config: server_side_across_configs</li>
<li>Env Var: RCLONE_DRIVE_SERVER_SIDE_ACROSS_CONFIGS</li>
<li>Type: bool</li>
<li>Default: false</li>
</ul>
</p>
  <footer>
    <strong></strong>
    
      
        
      
    
  </footer>
</blockquote>

<p>編輯 <code>~/.config/rclone/rclone.conf</code>,
加入 <code>server_side_across_configs = true</code></p>
<pre><code>[google-personal-drive]
type = drive
scope = drive
server_side_across_configs = true
token = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
root_folder_id = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

[google-team-drive]
type = drive
scope = drive
server_side_across_configs = true
token = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
team_drive = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</code></pre><p>接著進行傳輸, 同時透過 iftop 觀察網路頻寬.
可以發現到 rclone 回報的速度數百 MBps 左右, 但是 iftop 回報的流量只有數十 kbps.
代表成功的直接在伺服器端進行傳輸, 而不消耗本機頻寬, 速度快多了.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3fSS4nQZkkvujw8YtBCcYlw8sgyp9Xtc5f_fBKrsc96NMsTWCtAp8nRjho0i7uoj7f8kJOBaDDNbA7W4h3k3uJ8aTOD908TfYTZlmFflQXwyU7oLsE96ChT13uc0a48h2do9s6GdhdcsHgnFcbodSmriQ=w730-h588-no?authuser=0" alt=""></p>
<p><strong>伺服器端檔案傳輸僅限於同一帳戶下的不同資料夾 (包含共享硬碟), 操作前需先把相關資料夾分享並加到相同帳戶下才不會出錯</strong></p>
<p>BTW, 在 macOS 安裝 iftop 發生了小問題, 解決紀錄於此: <a href="https://kywk.github.io/moco/posts/macos/macos_install-iftop/">macOS 安裝 iftop 失敗與解決方式 · moco</a></p>
<h2 id="see-also">See Also</h2>
<h3 id="rclone-configure-file">rclone configure file</h3>
<p>在 macOS, Linux 環境下, rclone 設置檔存放在 <code>$HOME/.config/rclone/rclone.conf</code>
我工作需在多台電腦中切換, 個人習慣把 .config 裡需在多台電腦同步的資料夾放在 Dropbox 上,
再建立對應 symbolic link.</p>
<pre><code>$ mkdir ~/Dropbox/config
$ mv ~/.config/rclone ~/Dropbox/config
$ ln -sfF ~/Dropbox/config/rclone .config/rclone
</code></pre><p>這樣無論在哪台電腦修改了什麼設定, 換個電腦仍可輕鬆同步設定.</p>
<h3 id="rclone-supported-cloud-drive">rclone supported cloud drive</h3>
<p>Rclone 所支援的雲端硬敵種類如下:</p>
<pre><code> 1 / 1Fichier
 2 / Alias for an existing remote
 3 / Amazon Drive
 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, Tencent COS, etc)
 5 / Backblaze B2
 6 / Box
 7 / Cache a remote
 8 / Citrix Sharefile
 9 / Dropbox
10 / Encrypt/Decrypt a remote
11 / FTP Connection
12 / Google Cloud Storage (this is not Google Drive)
13 / Google Drive
14 / Google Photos
15 / Hubic
16 / In memory object storage system.
17 / Jottacloud
18 / Koofr
19 / Local Disk
20 / Mail.ru Cloud
21 / Mega
22 / Microsoft Azure Blob Storage
23 / Microsoft OneDrive
24 / OpenDrive
25 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)
26 / Pcloud
27 / Put.io
28 / QingCloud Object Storage
29 / SSH/SFTP Connection
30 / Sugarsync
31 / Tardigrade Decentralized Cloud Storage
32 / Transparently chunk/split large files
33 / Union merges the contents of several upstream fs
34 / Webdav
35 / Yandex Disk
36 / http Connection
37 / premiumize.me
38 / seafile
</code></pre><h3 id="reference">Reference</h3>
<ul>
<li><a href="https://wp.madjack.info/linux/rclone-googledrive-onedrive.html">Rclone:玩轉Google Drive &amp; One Drive - 消失的亞特蘭提斯</a></li>
<li><a href="https://caloskao.org/rclone-across-transfer-each-cloud-drive-without-local-machine-bandwidth/">Rclone 在不使用本機頻寬的條件下進行跨雲端硬碟傳輸 | Calos&rsquo;s Blog</a></li>
<li><a href="http://jdev.tw/blog/4746/rclone-cloud-storage-command-line">用rclone命令行指令簡化雲端儲存服務的各項檔案操作 | 簡睿隨筆 | 學習過程的紀錄與備忘</a></li>
<li><a href="t.ly/AWMh">GOOGLE Drive 相互複製 對拷. 前言 | by BunnyBit | Medium</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>macOS 安裝 iftop 失敗與解決方式</title>
            <link>https://kywk.github.io/moco/posts/2020/12/macos_install-iftop/</link>
            <pubDate>Mon, 07 Dec 2020 16:48:04 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/12/macos_install-iftop/</guid>
            <description>測試 Rclone 伺服機端傳輸時發覺 macOS 並無 iftop 指令, 習慣性地用 brew 安裝了.
$ brew install iftop ... ... iftop requires root privileges so you will need to run `sudo iftop`. You should be certain that you trust any software you grant root privileges. 安裝完成後提示 iftop 這個指令需要用 root 權限執行.
然而使用 sudo iftop 之後卻出現 command not found 的錯誤.
$sudo iftop sudo: iftop: command not found 上網查了查, 看到這篇 一次macbook安装iftop失败的经历及解决方式_偷懒的加菲-CSDN博客
跟著該文敘述一一確認後, 發覺我電腦上只存在著 sbin 不在 path 環境變數的問題.</description>
            <content type="html"><![CDATA[<p>測試 Rclone 伺服機端傳輸時發覺 macOS 並無 iftop 指令, 習慣性地用 brew 安裝了.</p>
<!-- raw HTML omitted -->
<pre><code>$ brew install iftop
...
...
iftop requires root privileges so you will need to run `sudo iftop`.
You should be certain that you trust any software you grant root privileges.
</code></pre><p>安裝完成後提示 iftop 這個指令需要用 root 權限執行.</p>
<p>然而使用 sudo iftop 之後卻出現 command not found 的錯誤.</p>
<pre><code>$sudo iftop
sudo: iftop: command not found
</code></pre><p>上網查了查, 看到這篇 <a href="https://blog.csdn.net/hl449006540/article/details/86753227">一次macbook安装iftop失败的经历及解决方式_偷懒的加菲-CSDN博客</a><br>
跟著該文敘述一一確認後, 發覺我電腦上只存在著 sbin 不在 path 環境變數的問題.</p>
<pre><code>$ sudo vim /etc/paths
</code></pre><p>打開後發覺裡面有 <code>/usr/local/bin</code>, 但沒有 <code>/usr/local/sbin</code>.<br>
手動把 <code>/usr/local/sbin</code> 加入, 存檔, 重啟終端機.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3dGa69B3UVBKt_TYzNt4-nTxPn8WbSfDK1nVlQ7PXOXDIwwV9pQbliqr6_vH69TMj-FOUY26BG_CiFLDHo6pXTGOE6dtYMESpYQD-8jucaCbnZ3qObEMzdsFbm62I_Omdvzz-Q_unLNo2CVRxQPkyDsAw=w1208-h894-no?authuser=0" alt=""></p>
<p>成功.
紀錄之.</p>
]]></content>
        </item>
        
        <item>
            <title>Porting Hexo tags to Hugo shortcode</title>
            <link>https://kywk.github.io/moco/posts/2020/10/porting-hexo-tags/</link>
            <pubDate>Sat, 24 Oct 2020 17:05:52 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/10/porting-hexo-tags/</guid>
            <description>Hexo 標籤 Hexo 標籤外掛是用於在文章中快速插入特定內容的外掛, 有幾種方式擴充:
  內建標籤:
Hexo 內建標籤有常用的 Block Quote, Gist, iframe, Youtube, &amp;hellip; 包含 Markdown 不支援但常用的 HTML 語法, 影音嵌入, 程式片斷嵌入&amp;hellip;等.
文章使用內建標籤的相容性最高, 不容易因更換主題而導致生成錯誤的情況. 但不同 Hexo 版本的內建標籤還是可能不同而發生相容性問題.
  標籤外掛:
Hexo 有強大的外掛系統, 能輕鬆擴展功能而不用修改核心模組的原始碼.
標籤亦可透過外掛擴充, 如何製作標籤外掛 官方有詳細說明.
Plugins | Hexo 是官方收集的外掛列表, hexo-tag 開頭為標籤外掛. 通常透過 npm install PACKAGE_NAME 來安裝外掛.
標籤外掛安裝在站台根目錄, 文章使用外掛的標籤和內建標籤一樣是不分主題皆可使用, 通常和 Hexo 版本無關, 不會因 Hexo 升版而出現相容問題.
  主題支援:
Hexo 主題可以提供該主題內建支援的標籤, 主題內透過外掛的方式提供擴充的標籤提供文章使用.
主題支援的標籤產生的網頁風格型態通常比較美觀. 但更換主題時可能會不支援的問題.
  Hugo shortcode Hugo shortcode 和 Hexo tags 很像, 也有內建 / 站台外掛 / 主題支援三種方式.</description>
            <content type="html"><![CDATA[<h2 id="hexo-標籤">Hexo 標籤</h2>
<p>Hexo 標籤外掛是用於在文章中快速插入特定內容的外掛, 有幾種方式擴充:</p>
<ol>
<li>
<p><strong>內建標籤:</strong><br>
Hexo <a href="(https://hexo.io/zh-tw/docs/tag-plugins)">內建標籤</a>有常用的 Block Quote, Gist, iframe, Youtube, &hellip;
包含 Markdown 不支援但常用的 HTML 語法, 影音嵌入, 程式片斷嵌入&hellip;等.</p>
<p>文章使用內建標籤的相容性最高, 不容易因更換主題而導致生成錯誤的情況.
但不同 Hexo 版本的內建標籤還是可能不同而發生相容性問題.</p>
</li>
<li>
<p><strong>標籤外掛:</strong><br>
Hexo 有強大的<a href="https://hexo.io/zh-tw/docs/plugins">外掛系統</a>, 能輕鬆擴展功能而不用修改核心模組的原始碼.<br>
標籤亦可透過外掛擴充, <a href="https://hexo.io/zh-tw/api/tag.html">如何製作標籤外掛</a> 官方有詳細說明.<br>
<a href="https://hexo.io/plugins/">Plugins | Hexo</a> 是官方收集的外掛列表, <code>hexo-tag</code> 開頭為標籤外掛.
通常透過 <code>npm install PACKAGE_NAME</code> 來安裝外掛.</p>
<p>標籤外掛安裝在站台根目錄, 文章使用外掛的標籤和內建標籤一樣是不分主題皆可使用,
通常和 Hexo 版本無關, 不會因 Hexo 升版而出現相容問題.</p>
</li>
<li>
<p><strong>主題支援:</strong><br>
Hexo 主題可以提供該主題內建支援的標籤, 主題內透過外掛的方式提供擴充的標籤提供文章使用.<br>
主題支援的標籤產生的網頁風格型態通常比較美觀. 但更換主題時可能會不支援的問題.</p>
</li>
</ol>
<h2 id="hugo-shortcode">Hugo shortcode</h2>
<p>Hugo shortcode 和 Hexo tags 很像, 也有<a href="https://gohugo.io/content-management/shortcodes/">內建</a> / 站台外掛 / 主題支援三種方式.
官方有編寫 shortcode 教學 - <a href="https://gohugo.io/templates/shortcode-templates/">Create Your Own Shortcodes | Hugo</a>.</p>
<p>而 Hugo 安裝 shortcode 站台外掛比 Hexo 簡單些, 把相關檔案放在站台 <code>layouts/shortcodes</code> 即可,
不像 Hexo 需透過 <code>npm install package</code>.</p>
<h2 id="kywkhugo-shortcodes">kywk/hugo-shortcodes</h2>
<p><a href="https://github.com/kywk/hugo-shortcodes">kywk/hugo-shortcodes</a>, 一些 Hexo 內建或常見的 Tag 移植到 Hugo shortcodes 的收集.</p>
<h3 id="block-quote">Block Quote</h3>
<p>在文章中插入引言，可包含作者、來源和標題。</p>
<ul>
<li>
<p>Normal quote:</p>
<pre><code>{{&lt; blockquote &gt;}}
  This is a simple quote.
{{&lt; /blockquote &gt;}}
</code></pre>










  





  


<blockquote>
  <p><pre><code>  This is a simple quote.
</code></pre>
</p>
  <footer>
    <strong></strong>
    
      
        
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author</p>
<pre><code>{{&lt; blockquote author=&quot;Author2&quot; &gt;}}
  This is a quote with only an Author named Author2.
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





  


<blockquote>
  <p><pre><code>  This is a quote with only an Author named Author2.
</code></pre>
</p>
  <footer>
    <strong>Author2</strong>
    
      
        
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author and source</p>
<pre><code>{{&lt; blockquote author=&quot;Author3&quot; source=&quot;Source&quot; &gt;}}
  This is a quote from Author3 and source &quot;source.&quot;
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





  


<blockquote>
  <p><pre><code>  This is a quote from Author3 and source &quot;source.&quot;
</code></pre>
</p>
  <footer>
    <strong>Author3</strong>
    
      <cite>Source</cite>
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author and link</p>
<pre><code>{{&lt; blockquote author=&quot;Author4&quot; link=&quot;https://www.google.com&quot; &gt;}}
  This is a quote from Author4 and links to https://www.google.com.
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





      
      
      
    
     
      
    
    

    
    
  


<blockquote>
  <p><pre><code>  This is a quote from Author4 and links to https://www.google.com.
</code></pre>
</p>
  <footer>
    <strong>Author4</strong>
    
      
        <cite>
          <a href="https://www.google.com" title="https://www.google.com" rel="noopener noreferrer">google.com</a> 
        </cite>
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author, link and title</p>
<pre><code>{{&lt; blockquote author=&quot;Author5&quot; link=&quot;https://www.google.com&quot; title=&quot;Google&quot; &gt;}}
  This is a quote from Author5 and links to https://www.google.com with title &quot;Google.&quot;
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





  


<blockquote>
  <p><pre><code>  This is a quote from Author5 and links to https://www.google.com with title &quot;Google.&quot;
</code></pre>
</p>
  <footer>
    <strong>Author5</strong>
    
      
        <cite>
          <a href="https://www.google.com" title="https://www.google.com" rel="noopener noreferrer">Google</a> 
        </cite>
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Quote with author and a link longer than 32 characters, string is first cut at 32 characters then everything after the last forward slash is removed</p>
<pre><code>{{&lt; blockquote author=&quot;Author6&quot; link=&quot;https://twitter.com/CryptoGangsta/status/716427930126196737&quot; &gt;}}
  This is a quote from Author5 and links to https://twitter.com/CryptoGangsta/status/716427930126196737 which is longer than 32 characters.
  &lt;br&gt;And this is a new line in the quote with the HTML br tag.
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





      
      
      
    
     
      
    
    

    
    
         
         
         

         
        
        
        
        
      
      
    
  


<blockquote>
  <p><pre><code>  This is a quote from Author5 and links to https://twitter.com/CryptoGangsta/status/716427930126196737 which is longer than 32 characters.
  &lt;br&gt;And this is a new line in the quote with the HTML br tag.
</code></pre>
</p>
  <footer>
    <strong>Author6</strong>
    
      
        <cite>
          <a href="https://twitter.com/CryptoGangsta/status/716427930126196737" title="https://twitter.com/CryptoGangsta/status/716427930126196737" rel="noopener noreferrer">twitter.com/CryptoGangsta/...</a> 
        </cite>
      
    
  </footer>
</blockquote>

</li>
<li>
<p>Test from the Octopress blockquote page at: <a href="http://octopress.org/docs/plugins/blockquote/">http://octopress.org/docs/plugins/blockquote/</a></p>
<pre><code>{{&lt; blockquote author=&quot;@allanbranch&quot; link=&quot;https://twitter.com/allanbranch/status/90766146063712256&quot; &gt;}}
  Over the past 24 hours I've been reflecting on my life &amp; I've realized only one thing. I need a medieval battle axe.
{{&lt; /blockquote &gt;}}
</code></pre>










  
  
  
  





      
      
      
    
     
      
    
    

    
    
         
         
         

         
        
        
        
        
        
        
      
      
    
  


<blockquote>
  <p><pre><code>  Over the past 24 hours I've been reflecting on my life &amp; I've realized only one thing. I need a medieval battle axe.
</code></pre>
</p>
  <footer>
    <strong>@allanbranch</strong>
    
      
        <cite>
          <a href="https://twitter.com/allanbranch/status/90766146063712256" title="https://twitter.com/allanbranch/status/90766146063712256" rel="noopener noreferrer">twitter.com/allanbranch/status/...</a> 
        </cite>
      
    
  </footer>
</blockquote>

</li>
</ul>
<p><em>2020.10.24 Hexo blockquote 參數部分陸續補齊</em></p>
<h3 id="obsidian-invisible-block">Obsidian (Invisible Block)</h3>
<p>如<a href="https://kywk.github.io/moco/posts/hugo/from-hexo-to-hugo/">從 Hexo 到 Hugo</a>
中所提及的, 我的 blog 資料夾是放在 Obsidian Vault 中,
為了可以正常使用 Obsidian 標籤, 區塊連結, 反向連結等功能, 文章中穿插了不少 Obsidian 的語法.
這些語法雖不會造成 Hugo 錯誤, 但部落格文章中有奇怪的語法總是怪.</p>
<p>做了個 Obsidian shortcode, 區塊內容將放在 <code>display:disable</code> 的 div block 中.
只要把 Obsidian 的語法標示放在 Obsidian 區塊中,
既可享受 Obsidian 帶來的便利功能, 也不影響部落格的閱讀.</p>
<pre><code>{{&lt; obsidian &gt;}}
  Obsidian tag, link, block id, ... etc here.
{{&lt; /obsidian &gt;}}
</code></pre><div style="display:none">
  
  Obsidian tag, link, block id, ... etc here.

</div>

]]></content>
        </item>
        
        <item>
            <title>從 Hexo 到 Hugo</title>
            <link>https://kywk.github.io/moco/posts/2020/10/from-hexo-to-hugo/</link>
            <pubDate>Wed, 14 Oct 2020 15:08:05 +0800</pubDate>
            
            <guid>https://kywk.github.io/moco/posts/2020/10/from-hexo-to-hugo/</guid>
            <description>本文以 Hugo v0.76.2 編寫介紹, 其他版本若步驟或訊息內容不符, 請以官方文件為準
從 Hexo 到 Hugo 沒想過會再次開始寫 Blog, 多事的 2020 太多意外, 覺得需要即時一一進行想做的事.
於是重新開始了 Blog, 把想做的事完成, 紀錄, 然後放水流, 繼續&amp;hellip;
雖一直使用 Hexo, 但脫節的這些年 Hexo 改了不少. 繼續沿用 Hexo 還是換個平台重新來過, 評估了許久.
之前使用自行修改過後的 Hexi, 和 Hexo 已越來越不相容, 偶爾升版都需解決衝突.
用 從 Hexo 到 Hugo 餵狗, 多數人棄坑 Hexo 原因多為效能落差大, 及轉移無痛.
這些文章中, 個人心路歷程則和 从 Hexo 到 Hugo - ouuan的博客 較為接近.
自己工作上的開發也漸漸從 node.js 轉移到 go lang, 部落格平台轉移似乎天注定.
建制環境 官方有提供如何安裝及設定 Hugo 的說明文件, 網路上也找得到中文版文件.
使用Hugo+Github Pages建置Blog 這篇寫得挺詳細, 部分內容架構會參考該文, 再以自己的歷程增減補充.</description>
            <content type="html"><![CDATA[<p><em>本文以 Hugo v0.76.2 編寫介紹, 其他版本若步驟或訊息內容不符, 請以官方文件為準</em></p>
<h2 id="從-hexo-到-hugo">從 Hexo 到 Hugo</h2>
<p>沒想過會再次開始寫 Blog, 多事的 2020 太多意外, 覺得需要即時一一進行想做的事.<br>
於是重新開始了 Blog, 把想做的事完成, 紀錄, 然後放水流, 繼續&hellip;</p>
<p>雖一直使用 Hexo, 但脫節的這些年 Hexo 改了不少.
繼續沿用 Hexo 還是換個平台重新來過, 評估了許久.<br>
之前使用自行修改過後的 Hexi, 和 Hexo 已越來越不相容, 偶爾升版都需解決衝突.</p>
<p>用 <a href="https://www.google.com/search?sxsrf=ALeKk032kFJ5VuvMawA5Inq9zUmrYJtn3Q%3A1602060011667&amp;ei=6359X8GUKOSbmAWh8oewDQ&amp;q=%E5%BE%9E+hexo+%E5%88%B0%C2%A0hugo&amp;oq=%E5%BE%9E+hexo+%E5%88%B0%C2%A0hugo&amp;gs_lcp=CgZwc3ktYWIQAzoECCMQJzoHCCMQsAIQJzoFCCEQoAFQi3hYnrcBYIu5AWgEcAB4AYABhAGIAbkMkgEEMjIuMpgBAKABAaoBB2d3cy13aXrAAQE&amp;sclient=psy-ab&amp;ved=0ahUKEwiBtp3PiqLsAhXkDaYKHSH5AdYQ4dUDCA0&amp;uact=5">從 Hexo 到 Hugo</a> 餵狗,
多數人棄坑 Hexo 原因多為效能落差大, 及轉移無痛.<br>
這些文章中, 個人心路歷程則和 <a href="https://ouuan.github.io/post/from-hexo-to-hugo/">从 Hexo 到 Hugo - ouuan的博客</a> 較為接近.<br>
自己工作上的開發也漸漸從 node.js 轉移到 go lang, 部落格平台轉移似乎天注定.</p>
<h2 id="建制環境">建制環境</h2>
<p>官方有提供如何安裝及設定 Hugo 的<a href="https://gohugo.io/getting-started/installing/">說明文件</a>,
網路上也找得到<a href="https://www.gohugo.org/doc/overview/installing/">中文版文件</a>.<br>
<a href="https://carrie-lai.github.io/post/createhugoblog/">使用Hugo+Github Pages建置Blog</a> 這篇寫得挺詳細,
部分內容架構會參考該文, 再以自己的歷程增減補充.</p>
<h3 id="安裝-hugo">安裝 Hugo</h3>
<p>對於 Mac 開發者來說, <a href="https://brew.sh/">Homebrew</a> 該是再熟悉不過的工具.
Hugo 有提供 brew 套件, 相當方便的安裝方式.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install hugo
</code></pre></div><p>安裝完後可透過 <code>hugo version</code> 確認版本, 若安裝失敗應該會出現 <code>command not found</code> 的錯誤訊息.
若可顯示 Hugo 版本資訊則安裝成功</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew version
Hugo Static Site Generator v0.76.2/extended darwin/amd64 BuildDate: unknown
</code></pre></div><p>若透過 brew 安裝的版本不是想要的版本, 也可以自行下載特定版本手動安裝.<br>
梅干有教學: <a href="https://www.minwt.com/webdesign-dev/html/21603.html">MAC平台環境中，下載所需的Hugo版本與手動安裝 | 梅問題．教學網</a></p>
<h3 id="初始化-blog">初始化 Blog</h3>
<p>找個地方當作是存放 Blog 的資料夾, 下指令 <code>hugo new site 目標資料夾路徑</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ hugo new site test
Congratulations! Your new Hugo site is created in /Users/kywk/Downloads/test.

Just a few more steps and you<span style="color:#960050;background-color:#1e0010">&#39;</span>re ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/ or
   create your own with the <span style="color:#e6db74">&#34;hugo new theme &lt;THEMENAME&gt;&#34;</span> command.
2. Perhaps you want to add some content. You can add single files
   with <span style="color:#e6db74">&#34;hugo new &lt;SECTIONNAME&gt;/&lt;FILENAME&gt;.&lt;FORMAT&gt;&#34;</span>.
3. Start the built-in live server via <span style="color:#e6db74">&#34;hugo server&#34;</span>.

Visit https://gohugo.io/ <span style="color:#66d9ef">for</span> quickstart guide and full documentation.
</code></pre></div><p>成功的話會看到上述訊息 (依版本不同訊息內容或許不同)<br>
在 Blog 資料夾也會看到預設得資料結構</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd test/
$ ls
archetypes  config.toml content     data        layouts     static      themes
</code></pre></div><h3 id="選用-theme">選用 theme</h3>
<p>主題可以到 <a href="https://themes.gohugo.io/">Hugo Themes</a> 去找自己喜歡的來用, 都有預覽可以看.</p>
<p>官方教學 <a href="https://gohugo.io/getting-started/quick-start/">Quick Start | Hugo</a> 是建議使用 git submodule 來安裝與追蹤主題更新,
不過我並沒有打算為部落格建立 git 版控, 所以直接把喜歡的主題 clone 到 themes 資料夾底下.</p>
<p>這個部落格用的是 <a href="https://themes.gohugo.io/hugo-coder/">coder</a>, 指令如下:</p>
<pre><code>$ cd themes
$ git clone https://github.com/luizdepra/hugo-coder.git
</code></pre><p>不同主題會有不同主題的配置內容, 主題的說明文件上應該都會說明設定方式, 詳閱並耐心修改.
大部分 Hugo 主題都會有 <code>exampleSite</code> 資料夾, 是個參考修改的入口.</p>
<h2 id="搬移-hexo-文件">搬移 hexo 文件</h2>
<p>以下說明 Hexo 和 Hugo 設計思維不同之處, 並簡單介紹搬移 Hexo 到 Hugo 注意事項.</p>
<h3 id="檔案資料夾">檔案資料夾</h3>
<p>Hugo 文章則放在 <code>content</code> 資料夾, 直接把 Hexo 站台 <code>source/_post</code> 的檔案直接複製到 Hugo 的 <code>content</code> 即可.</p>
<p>自己目前是使用 <a href="https://obsidian.md/">Obsidian</a> 作為筆記管理系統, 部落格文章也都存放在 Obsidian 資料倉儲內.
所幸 UNIXlike 檔案系統的支援, 可以直接建立 Symbolic link, 把 Obsidian 資料夾下的部落格文章 link 到 Hugo 站台.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd hugo-site/content
$ ln -sfF ~/Documents/Obsidian/blog blog
</code></pre></div><p>這樣一來, 我可以使用 Obsidian 來管理部落格文章, 並使用 Hugo 來發佈部落格.</p>
<h3 id="草稿">草稿</h3>
<p>hexo 把放在 <code>source/_draft</code> 的文章視為草稿, 發佈時不會產生該資料夾下的文章.<br>
hugo 則是以文章 Front Matter 中的 <code>draft</code> 屬性判斷該篇文章是否為草稿, 預設為非草稿.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">---
title: &#34;從 hexo 到 hugo&#34;
date: 2020-10-06T15:08:05+08:00
draft: true
...
---
</code></pre></div><p>兩者設計各有優缺, 個人喜歡 hugo 的方式,
文章編輯完直接改設定再發佈即可, 不需要搬移檔案, 操作比較直觀.</p>
<h3 id="front-matter">Front Matter</h3>
<p>hexo 對 Front Matter 寬容度較高, 不一定要包在兩個 <code>---</code> 之間, 甚至可以不需要 <code>---</code>.<br>
而 hugo 的 Front Matter 則必須包含在 <code>---</code> 之間, 否則會出錯.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">---
title: &#34;從 hexo 到 hugo&#34;
date: 2020-10-06T15:08:05+08:00
categories: [&#34;hugo&#34;]
tags: [&#34;hugo&#34;, &#34;tutorial&#34;]
---
</code></pre></div><p>這部份需一一確認文章修改, 或是自行透過熟悉的工具批次比對後修正.</p>
<h3 id="tag--shortcodes">Tag &amp; shortcodes</h3>
<p>使用 Markdown 寫文章好處是相容性較高, 使用常見格式在文章主體幾乎都可以不需修改, 直接產生.
但各個 Blog 系統還是有各自的擴充格式, 這部份可能必須手動一一確認修正.
或參考 <a href="https://gohugo.io/tools/migrations/">官方 Migrate to Hugo</a> 裡面一些轉換工具的介紹.</p>
<p>Hexo Tag plugin 擴充指令對應到的是 Hugo shortcodes, 都是可以透過簡單指令來插入複雜格式的方法.
格式上 Hexo 的擴充 Tag 格式和 Jekyll 一樣, 格式為 <code>{% tag_name %}</code>,
而 Hugo shortcodes 格式則為 <code>{ {&lt; shortcode_name &gt;} }</code></p>
<p>格式轉換上可使用 <a href="https://github.com/coderzh/ConvertToHugo">ConvertToHugo</a> 來轉換,
若有 Hugo 或選用的主題所沒有的 shortcode, 只能自己手動處理.
官網有 <a href="https://gohugo.io/content-management/shortcodes/">Shortcodes</a> 的完整介紹與編寫範例.
一些常用的 shortcode 也容易在網路上找到範例.
把自行編寫或網路下載的 shortcodes 放在 <code>layouts/shortcodes</code> 即可.</p>
<p><a href="https://github.com/kywk/hugo-shortcodes">kywk/hugo-shortcodes</a> 這專案是個人使用的 shortcodes, 會陸續把 Hexo 內建的 Tag 都移植到 Hugo shortcodes.</p>
<h2 id="預覽">預覽</h2>
<ul>
<li>
<p>本地預覽</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ hugo server
</code></pre></div><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3eU2qvxANnWdmA058HjT6_iu-EPvodcn2aG2wPm64F72SZl7-Z41ZbcZkzKmshLIsettRm0GImbyIvRNeOQlXqYX5T38DUHinH1fEZI8MVSoZ3A3Om7o-cWvlxJOzZkA0nD1TjaCYmgaWdi-S1b0ftLOw=w559-h307-no?authuser=0" alt=""></p>
<p>會產生靜態頁面並產生預覽內容, 可以在瀏覽器經由 http://localhost:1313/ 查看,
且支援熱部署 (livereload), 修改文章或是 CSS 之類的東西時是不用重啟的.</p>
<p>若檢視部落格內容無誤, 即可產生靜態頁面.</p>
</li>
<li>
<p>產生靜態頁面: 在根目錄下指令</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ hugo
</code></pre></div><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3f6yJMe20dD8OCd3i7lPL30DC16KZ0xS49mlXtMUIZ-BKqlE7gQFBClXb1RT2l9Rptcb_6QjzztyFsC8tqb5oscP8bFTs0WYhqL2cmOTlSeENKW0RnhOfCdst2TuAZUHA6xLkxbj9qEyuLX88vM-hVnUg=w219-h209-no?authuser=0" alt=""></p>
<p>所生成的部落格靜態頁面放在 <code>public</code> 資料夾下, 可以直接上傳發佈.</p>
</li>
</ul>
<h2 id="發佈到-githubio">發佈到 github.io</h2>
<p>Hugo 沒有像 Hexo 內建 deploy 的指令, 需自行把檔案上傳網站空間.</p>
<p>我使用 <a href="https://pages.github.com/">GitHub Pages</a> 來放置個人網站.<br>
以下說明假設對 git/GitHub 已有一定程度熟悉, 關於 git 如何安裝, 相關指令細節不介紹.</p>
<h3 id="建立-githubio-repository">建立 github.io repository</h3>
<p>GitHub Pages 可以建立個人網站或專案網站,
基本設置發布流程皆相同, 差別在於 respository 名稱和預設 branch 不同.
詳盡的說明與步驟在 <a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/creating-a-github-pages-site">Creating a GitHub Pages site - GitHub Docs</a></p>
<p><strong>個人網站</strong></p>
<p>個人網站的網址為 <code>https://username.github.io</code>.</p>
<p>大部分相關 Hugo 教學文章都是使用個人網站來介紹, 文章資源相當多.
設定步驟亦相當簡單, 在 GitHub 上新建一個 <code>username.github.io</code> 的專案,
將該專案 clone 到 Hugo 站台資料夾內, 並改名為 public 即可.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd $hugo
$ git clone https://github.com/username/username.github.io public
</code></pre></div><p><strong>專案網站</strong></p>
<p>GitHub 允許使用者為每個專案建置該專案網站, 網址為 <code>https://username.github.io/project</code>.</p>
<p>GitHub Pages 專案網站預設是使用專案倉儲中的 <code>gh-pages</code> 分支.
直接在既有的的專案中, 新增 <code>gh-pages</code> branch 即可.</p>
<p>若想使用其他分支當作網站資料, 可到 GitHub 上去指定 GitHub Pages 所要使用的 branch 名稱和資料夾.</p>
<p><img src="https://lh3.googleusercontent.com/pw/ACtC-3eDlmDBVj0CEUuHX1_JPkrxo1Tf_b6UDrFPEu1yWPA6HBhd86DqdS0D8h9aT44Hlgl2C6lztM0ngPo2OihyWatPbNFw-qT7wHyR4NEMDSPN9v6Hktt8va0YeQmvA-kJiMTB3XQ9E-dvTZu_awgnQX-cFg=w589-h277-no?authuser=0" alt=""></p>
<h3 id="發布-script">發布 script</h3>
<p>Hugo 生成的靜態網站文件存放在 <code>public</code> 資料夾,
把該資料夾內所有檔案加入 git, 並 push 到 GitHub 就完成發佈了.</p>
<p>寫了簡單的 script 來完成上述發佈動作.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo
cd public
git add .
git commit -m <span style="color:#e6db74">&#34;Updated: `date +&#39;%Y-%m-%d %H:%M:%S&#39;`&#34;</span>
git push -f
cd ..
</code></pre></div><h2 id="後記">後記</h2>
<p>除了使用 Hugo 重新開始部落格外, 預計完成兩個 Hugo 主題開發: <strong>fuday</strong> 及 <strong>rholi</strong>.<br>
及, 可能的話, 寫個 hexo2hugo 或 hexo2netlify 的主題轉換產生器.</p>
<p>開發歷程筆記和紀錄會整理更新在本部落格, 完成的發表亦然.<br>
回到寫 blog 的生活, 有種充實感, 比較有目標完成某件事.</p>
]]></content>
        </item>
        
    </channel>
</rss>
